SUBMISSION COMMUNICATION ID: ES2502-df5178f5

ACTION TYPE: Modification

SUBMISSION STATUS: Init-Consultation

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2025-02-23 06:49:26

ISSUES: yes/active

ISSUE DETAILS: SUB.MISC

PUBTRACKER: #140

MTRACKER: #1230

GITHUBUSER: ctflearner

SUBMISSION TYPE: Software

NAME: Add demonstrative example to CWE-94

DESCRIPTION:

I want to suggest the below code for Java language for the given 
description.

Demonstrative Examples:

````
String messageFile = "messages.txt";

if (request.getParameter("action").equals("NewMessage")) {
    String message = request.getParameter("message");

    FileWriter writer = new FileWriter(messageFile, true);
    writer.write(message + "
");
    writer.close();
} 
else if (request.getParameter("action").equals("ViewMessages")) {
    Runtime.getRuntime().exec("cat " + messageFile);
}
````

This code takes user input (message) and writes it directly to a file
without validation. Later, when the file is read using
Runtime.getRuntime().exec(), it allows an attacker to inject malicious
shell commands.

An attacker could send:
````
http://example.com/messages?action=NewMessage&message=; rm -rf /

````
This inserts a shell command (rm -rf /), which will be executed when
ViewMessages is accessed, wiping out the entire system.

RELATED WEAKNESSES:

   Other CWE-94

REFERENCES:


ACTIVE ISSUES:

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: CWE-94: Improper Control of Generation of Code ('Code Injection')
is a weakness where an attacker can inject malicious code that is dynamically 
executed by the application. This typically involves scenarios where user input 
is used to generate or execute code at runtime. In the provided example, 
the user input is written to a file and later used as part of an 
operating system command (Runtime.getRuntime().exec()), which is 
CWE-78: Improper Neutralization of Special Elements Used in an OS Command 
('OS Command Injection'). However, that CWE already has a similar Java-based
example, so we we cannot accept this submission for inclusion under that CWE. 
If you'd like to get an example added to CWE-94, please provide an example 
that is not OS command injection.

Response: <SUBMITTER SHOULD REPLY HERE>


----------

RESOLVED ISSUES:



TIMELINE:

Received: 2025-02-23

Ack-Receipt: 2025-03-11

Init-Review: 2025-04-08

Init-Consultation: 2025-05-20

Init-Declined: YYYY-MM-DD

Init-Accepted: YYYY-MM-DD

Det-Requested: YYYY-MM-DD

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD




COMMUNICATIONS LOG:
2025-03-11 sent email
2025-04-08 sent email
2025-05-20 sent email
