SUBMISSION COMMUNICATION ID: ES2209-49c28f1b

ACTION TYPE: Modification

SUBMISSION STATUS: Internal-Update

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2022-09-13 05:10:17

ISSUES: no

ISSUE DETAILS: 

PUBTRACKER: #12

MTRACKER: #641

GITHUBUSER: windshock

SUBMISSION TYPE: Software

NAME: uninitialized variable vulnerability - Problem with boolean variables that are forcibly initialized to false by the Java compiler

DESCRIPTION:

Sites such as CWE and VULNCAT all describe only code quality and
memory problems, so I made an example code for the vulnerability of an
uninitialized variable(CWE-457, CWE-456). In the Java language,
boolean member variables that are not explicitly initialized are
forcibly initialized to false by the compiler
(https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5). This
can lead to logic vulnerabilities(CWE-840). If Java had a type like
Python's NoneType
(https://docs.python.org/3.7/library/constants.html), this might not
have happened. detail :
https://github.com/windshock/uninitialized-variable-vulnerability

DEMONSTRATIVE EXAMPLES:

INTRO TEXT:

Consider the following merchant server application as implemented in
[REF-XXX]. It receives card payment information (orderPgData instance
in OrderPgData.java) from the payment gateway (such as PayPal). The
next step is to complete the payment (finalizeOrder() in
Main.java). The merchant server validates the amount (validateAmount()
in OrderPgData.java), and if the validation is successful, then the
payment is completed.

BAD CODE:
LANGUAGE: Java

https://github.com/windshock/uninitialized-variable-vulnerability/blob/main/OrderPgData.java

public class OrderPgData {
    String PgType;
    int productPrice;
    int paymentAmount;
    private boolean isPaymentAmountTampered;

     public boolean getIsPaymentAmountTampered() {
        return this.isPaymentAmountTampered;
    }

 ...
public void validateAmount() {
   ... [sets this.setIsPaymentAmountTampered to true or false depending on whether the product price matches the payment amount]
 }

===============

BAD CODE:
LANGUAGE: Java

public class PgServiceResolver {
    public OrderPgData getOrderPgDataByPgType(String pgType, int productPrice, int paymentAmount) {
...
        switch(pgType) {
            case "card":
                System.out.println("In "+pgType+" payment logic, orderPgData does not verify whether the product amount and payment amount have been tampered with.");
                break;
            case "paypal":
                System.out.println("In "+pgType+" payment logic, orderPgData verifies whether the product amount and payment amount have been tampered with.");
                orderPgData.validateAmount();
                break;
        }
...

===============

BAD CODE:
LANGUAGE: Java

public class Main {
    public static void main(String[] args) {
        String pgType = "card"; // or paypal
        int productPrice = 100;
        int paymentAmount = 10;
       PgServiceResolver pgServiceResolver = new PgServiceResolver();
        OrderPgData orderPgData = pgServiceResolver.getOrderPgDataByPgType(pgType, productPrice, paymentAmount);
        finalizeOrder(orderPgData);
}
   private static void finalizeOrder(OrderPgData orderPgData) {
        if (orderPgData.getIsPaymentAmountTampered()) {
            System.out.println("The attacker tampered with the payment amount, but product payment is canceled.");
        } else {
       ... /* the product payment is completed */
}
}
}

In PgServiceResolver.java, when pgType is "card" indicating a card
payment, orderPgData.validateAmount() is not called - that is, the
amount is not validated to be the same as the expected price.

Since isPaymentAmountTampered is declared as a private boolean, but it
is not initialized, it is initialized to false by the Java compiler.

If the adversary modifies the price, e.g. changing paymentAmount from
100 to 10, then no validation is performed. Since
isPaymentAmountTampered is "false" because of the default
initialization, the code finishes processing the payment because it
does not believe that the amount has been changed.


GOOD CODE:
LANGUAGE: Java

EXPLANATORY TEXT:

This weakness could be addressed by setting the value of
isPaymentAmountTampered to true. This is a "secure-by-default" value
that reflects a "default deny" policy - i.e., it's assumed that the
payment amount is tampered, and only a special validation step can
change this assumption.

...
    private boolean isPaymentAmountTampered = true;


RELATED WEAKNESSES:

   ChildOf CWE-456
   ChildOf CWE-457
   Other CWE-840

REFERENCES:

Title: [REF-XXX] uninitialized variable vulnerability - Problem with boolean variables that are forcibly initialized to false by the Java compiler
URL: https://github.com/windshock/uninitialized-variable-vulnerability/blob/main/README.md
Author: windshock
Date: 2022-09-13

Title: The Java Language Specification, Java SE 7 Edition
URL: https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.12.5
Date: 2013-02-28
Author: James Gosling, Bill Joy, Guy Steele, Gilad Bracha, Alex Buckley


ACTIVE ISSUES:



RESOLVED ISSUES:

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: The related weaknesses identified, especially, CWE-456 and
CWE-457 cover this issue well. This issue only highlights an example
of a boolean type. In this case, we agree that it would be best to
create a demonstrative example in one or both of these entries to
cover the boolean type in Java (if that isn't covered already),
instead of creating a new CWE entry.  CWE-456 and CWE-457 can also be
improved overall using the information shared in this submission, but
a new CWE isn't needed.

Response: [RESOLVED ISSUE; DO NOT CHANGE]



TIMELINE:

Received: 2022-09-13

Ack-Receipt: 2022-09-20

Init-Review: 2022-11-28

Init-Consultation: YYYY-MM-DD

Init-Declined: YYYY-MM-DD

Init-Accepted: 2023-01-06

Det-Requested: YYYY-MM-DD

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: 2023-02-27

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-09-20 sent email
2022-11-01 sent email
2022-11-10 received email
2023-01-06 sent email
2023-02-27 sent email
2023-09-12 publish server
