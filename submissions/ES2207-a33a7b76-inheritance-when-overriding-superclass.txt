SUBMISSION COMMUNICATION ID: ES2207-a33a7b76

ACTION TYPE: New Entry

SUBMISSION STATUS: Det-Requested

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2022-07-05 21:18:29

ISSUES: yes/active

ISSUE DETAILS: SUB.RELS, SUB.ABS.SUBTREE

PUBTRACKER: #19

MTRACKER: #599

GITHUBUSER: jharv1

SUBMISSION TYPE: Software

NAME: Improper use of inheritance when overriding methods of an uncontrolled superclass

# The summary consists of only one or two sentences that describe the
# weakness itself, i.e. the mistake that is made.
#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#summary

SUMMARY:

<<put the information here>>


EXTENDED DESCRIPTION: 

Improper use of inheritance can not only introduce fragility but break
a program's security properties. For example, in the case of a
superclass that implements a simple collection with a number of add
methods we might have a subclass that is responsible for upholding a
predicate or security property before calling the corresponding
overridden superclass add method. If a new add method is added to the
superclass (which could happen without notifying the owner of the
subclass), any client can simply call the new superclass method thus
bypassing the security in the security enforcing subclass. This is not
a theoretical weakness and has previously impacted classes when
hashtable and vector were brought into the Java Collections.The
correct approach in such scenarios is to use composition, not
inheritance. [CWE Team - its too much to type into this little box, but
a good example of a forwarding class is in "effective java" book]. In
simple terms, there is no access control with inheritance.

************************************************************************************************


MODES OF INTRODUCTION:

# This provides information about how and when a given weakness may be
# introduced. Information should list the Phase of the development life
# cycle in which the weakness can introduced. A descriptive Note is
# optional but preferred.
# 
# If the weakness can be introduced in multiple phases, include separate
# items for each Phase. Copy and paste as needed.
# 

# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#introduction


Phase: <<PHASE1>>

Note: <<put the information here>>


Phase: <<PHASE2>>

Note: <<put the information here>>


************************************************************************************************

APPLICABLE PLATFORMS:

# This element specifies the programming languages, operating systems,
# architectures, and technologies in which this weakness is usually
# found. If an element does not apply to this submission, you can use
# the "Not X-Specific" where "X" is the type of element.

# If there are multiple languages, OSes, architectures, and/or
# technologies, then list each one separately.
# 
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#platforms


# Values for Prevalence: Often, Sometimes, Rarely, Undetermined

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other

Language Name: <<LANGUAGE1>>
Prevalence: <<PREVALENCE1>>


Language Name: <<LANGUAGE2>>
Prevalence: <<PREVALENCE2>>


Language Name: <<LANGUAGE3>>
Prevalence: <<PREVALENCE3>>


# Values for Language Class: Assembly, Compiled, Hardware Description
#    Language, Interpreted, Not Language-Specific

Language Class: <<LANGCLASS1>>
Prevalence: <<PREVALENCE1>>

Language Class: <<LANGCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Name: AIX, Android, BlackBerry OS,
#    Chrome OS, Darwin, FreeBSD, iOS, macOS, NetBSD, OpenBSD, Red Hat,
#    Solaris, SUSE, tvOS, Ubuntu, watchOS, Windows 9x, Windows
#    Embedded, Windows NT

Operating System Name: <<OS1>>
Prevalence: <<PREVALENCE1>>

Operating System Name: <<OS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Class: Linux, macOS, Unix, Windows,
#    Not OS-Specific


Operating System Class: <<OSCLASS1>>
Prevalence: <<PREVALENCE1>>

Operating System Class: <<OSCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Architecture Name: Alpha, ARM, Itanium, Power
#     Architecture, SPARC, x86, Other


Architecture Name: <<ARCH1>>
Prevalence: <<PREVALENCE1>>

Architecture Name: <<ARCH2>>
Prevalence: <<PREVALENCE2>>

Architecture Name: <<ARCH3>>
Prevalence: <<PREVALENCE3>>


# Values for Architecture Class: Embedded, Microcomputer, Workstation,
#     Not Architecture-Specific

Architecture Class: <<ARCHCLASS1>>
Prevalence: <<PREVALENCE1>>

Architecture Class: <<ARCHCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Technology Name: Web Server, Database Server, Accelerator
#    Hardware, Analog and Mixed Signal Hardware, Audio/Video Hardware,
#    Bus/Interface Hardware, Clock/Counter Hardware, Communication
#    Hardware, Controller Hardware, Memory Hardware, Microcontroller
#    Hardware, Network on Chip Hardware, Power Management Hardware,
#    Processor Hardware, Security Hardware, Sensor Hardware, Storage
#    Hardware, Test/Debug Hardware


Technology Name: <<TECH1>>
Prevalence: <<PREVALENCE1>>

Technology Name: <<TECH2>>
Prevalence: <<PREVALENCE2>>

Technology Name: <<TECH3>>
Prevalence: <<PREVALENCE3>>


# Values for Technology Class: Client Server, Cloud Computing, ICS/OT,
#     Mainframe, Mobile, N-Tier, SOA, System on Chip, Web Based, Not
#     Technology-Specific
	
Technology Class: <<TECHCLASS1>>
Prevalence: <<PREVALENCE1>>

Technology Class: <<TECHCLASS2>>
Prevalence: <<PREVALENCE2>>


************************************************************************************************

COMMON CONSEQUENCES:

# This element will cover the typical negative security impact (or
# impacts) that occurs if this weakness can be exploited by an
# attacker. Each Consequence must include a Scope and Impact. Both the
# Likelihood and Note elements are optional.
#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#conseq



# Values for Scope: Confidentiality, Integrity, Availability, Access
#    Control, Accountability, Authentication, Authorization,
#    Non-Repudiation, Other


# Values for Impact: Modify Memory, Read Memory, Modify Files or
#    Directories, Read Files or Directories, Modify Application Data,
#    Read Application Data, DoS: Crash, Exit, or Restart, DoS:
#    Amplification, DoS: Instability, DoS: Resource Consumption (CPU),
#    DoS: Resource Consumption (Memory), DoS: Resource Consumption
#    (Other), Execute Unauthorized Code or Commands, Gain Privileges
#    or Assume Identity, Bypass Protection Mechanism, Hide Activities,
#    Alter Execution Logic, Quality Degradation, Unexpected State,
#    Varies by Context, Reduce Maintainability, Reduce Performance,
#    Reduce Reliability, Other


# Values for Likelihood: High, Medium, Low, Unknown


Scope: <<SCOPE1>>

Impact: <<IMPACT1a>>; <<IMPACT1b>>; <<IMPACT1c>>

Likelihood: <LIKELIHOOD1>>

Note: <<put the information here>>




Scope: <<SCOPE2>>

Impact: <<IMPACT2a>>; <<IMPACT2b>>; <<IMPACT2c>>

Likelihood: <LIKELIHOOD2>>

Note: <<put the information here>>




Scope: <<SCOPE3>>

Impact: <<IMPACT3a>>; <<IMPACT3b>>; <<IMPACT3c>>

Likelihood: <LIKELIHOOD3>>

Note: <<put the information here>>



************************************************************************************************

# 8. DEMONSTRATIVE EXAMPLES (required)

DEMONSTRATIVE EXAMPLES:

# The entry should have one or more demonstrative examples, but
# submitters should not put significant effort into these until the CWE
# team has reviewed and accepted the general concepts behind the
# submission. Submissions can include example information for either
# Software, Hardware, or both, as relevant.

# "BAD CODE" and "GOOD CODE" can be code snippets, descriptions of a
# design or architecture, or an algorithm or protocol.
#
# * If you would like to submit diagrams/images to support any
# weakness descriptive examples, please attach it to the email
# submission in a png format and reference it by filename where
# desired. For an example, please see:
# https://cwe.mitre.org/data/definitions/1256.html

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#demox

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other


INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


---------------

INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>



************************************************************************************************

OBSERVED EXAMPLES:

# Where known, the submission should identify multiple
# publicly-reported vulnerabilities in real-world products that
# exhibit the weakness. If possible, include CVE Identifier, its
# corresponding weblink, and a short summary. If a CVE ID is
# unavailable, use the Link to point to the reference that explains
# the vulnerability.

# The ID should be the CVE Identifier, if available. If not available,
# then supply a title or alternate ID used by the reference.

# The Link should be the URL to the reference that explains the
# weakness that leads to the vulnerability.

# The ObexSummary should be a brief sentence or two that focuses solely on
# the weakness in the affected product.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#obex

ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: <<SUM1>>


ID: <<CVE2>>

Link: <<LINK2>>

ObexSummary: <<SUM2>>


ID: <<CVE3>>

Link: <<LINK3>>

ObexSummary: <<SUM3>>


ID: <<CVE4>>

Link: <<LINK4>>

ObexSummary: <<SUM4>>


************************************************************************************************

DETECTION METHODS:

# Detection Methods should identify commonly-used methods of finding
# the weakness within the product's code, design, etc. This is NOT
# intended for detecting how the weakness is exploited in a
# vulnerability. There can be one or more methods provided.

# Values for Method: Automated Analysis, Automated Dynamic Analysis,
#    Automated Static Analysis, Automated Static Analysis - Source
#    Code, Automated Static Analysis - Binary or Bytecode, Fuzzing,
#    Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis,
#    Manual Static Analysis - Source Code, Manual Static Analysis -
#    Binary or Bytecode, White Box, Black Box, Architecture or Design
#    Review, Dynamic Analysis with Manual Results Interpretation,
#    Dynamic Analysis with Automated Results Interpretation, Formal
#    Verification, Simulation / Emulation, Other

# Values for Effectiveness: High, Moderate, Opportunistic, Limited, None

Method: <<METHOD1>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS1>>

Notes: <<put the information here>>


Method: <<METHOD2>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS2>>

Notes: <<put the information here>>


Method: <<METHOD3>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS3>>

Notes: <<put the information here>>




************************************************************************************************

POTENTIAL MITIGATIONS:

# This element should cover one or more techniques that will eliminate
# and/or reduce the frequency or impact of the weakness. Each mitigation
# must include a Phase and Description, while the Effectiveness element
# is optional. A descriptive Effectiveness Note is also optional.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#mitigations


# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

# Values for Effectiveness: High, Moderate, Limited, Incidental,
#    Discouraged Common Practice, Defense in Depth, None


Phase: <<PHASE1>>

Description: <<put the information here>>

Effectiveness: <<EFFECT1>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE2>>

Description: <<put the information here>>

Effectiveness: <<EFFECT2>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE3>>

Description: <<put the information here>>

Effectiveness: <<EFFECT3>>

Effectiveness Notes: <<put the information here>>



RELATED WEAKNESSES:

   ChildOf CWE-1357


REFERENCES:

Title: Effective Java Book - "favour composition over inheritance"

URL: https://books.google.co.uk/books?id=ka2VUBqHiWkC&lpg=PA83&ots=y-HmIhv_S-&dq=composition%20over%20inheritance%20security%20hashtable%20vector&pg=PA83#v=onepage&q=composition%20over%20inheritance%20security%20hashtable%20vector&f=false

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-NN-DD", "Monthname, YYYY", or "YYYY">>


Title: Composition vs inheritance, mentions security aspect

URL: https://www.journaldev.com/12086/composition-vs-inheritance

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-NN-DD", "Monthname, YYYY", or "YYYY">>


Title: another Composition vs inheritance article, mentions security aspect

URL: https://mymusing.co/composition-vs-inheritance/

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-NN-DD", "Monthname, YYYY", or "YYYY">>


ACTIVE ISSUES:

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship
is relevant; or, the weakness is apparent, but it is not clear what
the best parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if
SUB.UNCLEAR is present. It can progress to other phases if the CWE
Team agrees that the potential relationships may require closer
investigation.  The submission cannot progress to the publication
stage until clear relationships and direct parents are identified. The
CWE Team may decide to use high-level relationships (e.g., to Pillars)
if deeper problems such as SUB.ABS.SUBTREE exist and cannot be quickly
resolved.

Comments: SUB.RELS is applied because this entry suggests that
CWE-1357 should be its parent. However, CWE-1357 is largely
architecture/design in nature, and this is an implementation
weakness. Other CWEs such as CWE-1074 cover inheritance but are not
necessarily directly relevant to this weakness. Because SUB.UNCLEAR
does not apply to this submission, SUB.RELS does not prevent it from
moving to the next phase.  At worst, this could go under CWE-710:
Improper Adherence to Coding Standards but the best match (under
access control) would probably be CWE-749: Exposed Dangerous Method or
Function.

Response: Is it a viable option to just have this proposal a MemberOf
CWE-1006 Bad Coding Practices with no other relationship? I appreciate
it is difficult to create a relationship to existing inheritance
related CWE.

...

I notice a number of CWE in the CWE-1006 category are also under the
CWE-710 view, so it's not uncommon in terms of relationships. It is
not a neat fit into CWE-749 as that is it is more to do with exposing
an operation with the adversary being the client. In the proposed CWE,
the defender is the client and the adversary controls the potentially
dangerous function. I would be ok with which ever you see fit

------------

SUB.ABS.SUBTREE - "Potential subtree issue/gap"

Description: The submission might identify an issue for which there could
be a broader gap or organizational challenge that requires analysis of CWE
subtree relationships under Research View 1000, in ways that extend beyond
creation of a parent at the next-highest level of abstraction.

Resolution: The submission cannot progress past the consultation phase
(whether initial or full) unless it is at an acceptable level of
abstraction, and the subtree issue(s) can be resolved or addressed
independently.

Comments: Managing "authorization" issues within code is not covered
sufficiently well within CWE and is part of a larger effort to
reorganize CWE better with respect to access control. There are many
code weaknesses applicable to Java and other object-oriented languages
that ultimately involve access control for individual fields, methods,
etc. This submission is distinct enough - but generally applicable
beyond Java - that it can progress to later phases, even if the
subtree issues are not fully solved.

Response: I agree with the comments, no further opinion from me at
this time.



RESOLVED ISSUES:



TIMELINE:

Received: 2022-07-05

Ack-Receipt: 2022-07-08

Init-Review: 2022-12-07

Init-Consultation: 2024-01-16

Init-Accepted: 2024-04-01

Init-Declined: YYYY-MM-DD

Det-Requested: 2024-10-02

Det-Received: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-07-08 sent email
2022-11-18 received email
2022-12-07 sent email
2023-01-17 received email
2023-09-12 publish server
2023-12-14 received email
2023-12-22 sent email
2024-01-16 sent email
2024-01-16 sent email
2024-04-01 sent email
2024-10-02 sent email
