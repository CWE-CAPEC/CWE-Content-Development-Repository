SUBMISSION COMMUNICATION ID: ES2309-78afd2b1

ACTION TYPE: New Entry

AFFECTED CWES: CWE-1422

CDRAPPROVED: yes

SUBMISSION STATUS: Post-Publication

ORIGIN: sub-server

SUBMISSION DATE: 2023-09-19 17:41:51

ISSUES: not-analyzed

ISSUE DETAILS: 

PUBTRACKER: #36

MTRACKER: #856

GITHUBUSER: scottconstable

SUBMISSION TYPE: Hardware

NAME: (CWE-C / CWE-1422) Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution

DESCRIPTION:

(CWE-C / CWE-1422) A processor event or prediction may allow incorrect or stale data to
be forwarded to transient operations, potentially exposing data over a
covert channel.

EXTENDED DESCRIPTION:

Software may use a variety of techniques to preserve the
confidentiality of private data that is accessible within the current
processor context. For example, the memory safety and type safety
properties of some high-level programming languages help to prevent
software written in those languages from exposing private data. As a
second example, software sandboxes may co-locate multiple users’
software within a single process. The processor’s Instruction Set
Architecture (ISA) may permit one user’s software to access another
user’s data (because the software shares the same address space), but
the sandbox prevents these accesses by using software techniques such
as bounds checking.

If incorrect or stale data can be forwarded (for example, from a
cache) to transient operations, then the operations’
microarchitectural side effects may correspond to the data. If an
attacker can trigger these transient operations and observe their side
effects through a covert channel, then the attacker may be able to
infer the data. For example, an attacker process may induce transient
execution in a victim process that causes the victim to inadvertently
access and then expose its private data via a covert channel. In the
software sandbox example, an attacker sandbox may induce transient
execution in its own code, allowing it to transiently access and
expose data in a victim sandbox that shares the same address space.

Consequently, weaknesses that arise from incorrect/stale data
forwarding might violate users’ expectations of software-based memory
safety and isolation techniques. If the data forwarding behavior is
not properly documented by the hardware vendor, this might violate the
software vendor’s expectation of how the hardware should behave.

MODES OF INTRODUCTION:

Phase: Architecture and Design

Note: This weakness can be introduced by data speculation techniques,
or when the processor pipeline is designed to check exception
conditions concurrently with other operations. This weakness can also
persist after a CWE-B (CWE-1421) weakness has been mitigated. For example,
suppose that a processor can forward stale data from a shared
microarchitectural buffer to dependent transient operations, and
furthermore suppose that the processor has been patched to flush the
buffer on context switches. This mitigates the CWE-B (CWE-1421) weakness, but the
stale-data forwarding behavior may persist as a CWE-C (CWE-1422) weakness unless
this behavior is also patched.

APPLICABLE PLATFORMS:

Language Name: Not Language-Specific

Prevalence: Undetermined



Language Class: Not Language-Specific

Prevalence: Undetermined



Operating System Name: Not OS-Specific

Prevalence: Undetermined



Operating System Class: Not OS-Specific

Prevalence: Undetermined



Architecture Name: Not Architecture-Specific

Prevalence: Undetermined



Architecture Class: Not Architecture-Specific

Prevalence: Undetermined



Technology Name: Not Technology-Specific

Prevalence: Undetermined



Technology Class: Not Technology-Specific

Prevalence: Undetermined


COMMON CONSEQUENCES:

Scope: Confidentiality

Impact: Read Memory

Likelihood: Medium

Note: None


DEMONSTRATIVE EXAMPLES:

INTRO TEXT:

Faulting loads in a victim domain may trigger incorrect transient
forwarding, which leaves secret-dependent traces in the
microarchitectural state. Consider this code sequence example from
[REF-2].

BAD CODE:

LANGUAGE: C

void call_victim(size_t untrusted_arg) {
  *arg_copy = untrusted_arg;
  array[**trusted_ptr * 4096];
}

EXPLANATORY TEXT:

A processor with this weakness will store the value of untrusted_arg
(which may be provided by an attacker) to the stack, which is trusted
memory. Additionally, this store operation will save this value in
some microarchitectural buffer, for example, the store buffer.

In this code sequence, trusted_ptr is dereferenced while the attacker
forces a page fault. The faulting load causes the processor to
mis-speculate by forwarding untrusted_arg as the (transient) load
result. The processor then uses untrusted_arg for the pointer
dereference. After the fault has been handled and the load has been
re-issued with the correct argument, secret-dependent information
stored at the address of trusted_ptr remains in microarchitectural
state and can be extracted by an attacker using a vulnerable code
sequence.

GOOD CODE:

LANGUAGE: N/A

No code example provided

INTRO TEXT:

Some processors try to predict when a store will forward data to a
subsequent load, even when the address of the store or the load is not
yet known. For example, on Intel processors this feature is called a
Fast Store Forwarding Predictor ([REF-3]), and on AMD processors the
feature is called Predictive Store Forwarding ([REF-4]). A
misprediction can cause incorrect or stale data to be forwarded from a
store to a load, as illustrated in the following code snippet from
[REF-4]:

BAD CODE:

LANGUAGE: C

void fn(int idx) {
   unsigned char v;
   idx_array[0] = 4096;
   v = array[idx_array[idx] * (idx)];
}

EXPLANATORY TEXT:

In this example, assume that the parameter idx can only be 0 or 1, and
assume that idx_array initially contains all 0s. Observe that the
assignment to v in line 4 will be array[0], regardless of whether
idx=0 or idx=1. Now suppose that an attacker repeatedly invokes fn
with idx=0 to train the store forwarding predictor to predict that the
store in line 3 will forward the data 4096 to the load idx_array[idx]
in line 4. Then, when the attacker invokes fn with idx=1 the predictor
may cause idx_array[idx] to transiently produce the incorrect value
4096, and therefore v will transiently be assigned the value
array[4096], which otherwise would not have been accessible in line 4.

Although this toy example is benign (it doesn’t transmit array[4096]
over a covert channel), an attacker may be able to use similar
techniques to craft and train malicious code sequences to, for
example, read data beyond a software sandbox boundary.

GOOD CODE:

LANGUAGE: N/A

No code provided.


OBSERVED EXAMPLES:

ID: CVE-2020-0551

Link: https://www.cve.org/CVERecord?id=CVE-2020-0551

ObexSummary: A fault, microcode assist, or abort may allow transient
load operations to forward malicious stale data to dependent
operations executed by a victim, causing the victim to unintentionally
access and potentially expose its own data over a covert channel.


ID: CVE-2020-8698

Link: https://www.cve.org/CVERecord?id=CVE-2020-8698

ObexSummary: A fast store forwarding predictor may allow store
operations to forward incorrect data to transient load operations,
potentially exposing data over a covert channel.


POTENTIAL MITIGATIONS:

Phase: Architecture and Design

Description: The hardware designer can attempt to prevent transient
execution from causing observable discrepancies in specific covert
channels.


Phase: Requirements

Description: Processor designers, system software vendors, or other
agents may choose to restrict the ability of unprivileged software to
access to high-resolution timers that are commonly used to monitor
covert channels.


Phase: Requirements

Description: Processor designers may expose instructions or other
architectural features that allow software to mitigate the effects of
transient execution, but without disabling predictors. These features
may also help to limit opportunities for data exposure.

Effectiveness: Moderate

Effectiveness Notes: Instructions or features that constrain transient
execution or suppress its side effects may impact performance.


Phase: Requirements

Description: Processor designers may expose registers (for example,
control registers or model-specific registers) that allow privileged
and/or user software to disable specific predictors or other hardware
features that can cause confidential data to be exposed during
transient execution.

Effectiveness: Limited

Effectiveness Notes: Disabling specific predictors or other hardware
features may result in significant performance overhead.


Phase: Build and Compilation

Description: Use software techniques (including the use of
serialization instructions) that are intended to reduce the number of
instructions that can be executed transiently after a processor event
or misprediction.

Effectiveness: Incidental

Effectiveness Notes: Some transient execution weaknesses can be
exploited even if a single instruction is executed transiently after a
processor event or mis-prediction. This mitigation strategy has many
other pitfalls that prevent it from eliminating this weakness
entirely. For example, see [REF-10].


Phase: Build and Compilation

Description: Isolate sandboxes or managed runtimes in separate address
spaces (separate processes).

Effectiveness: High

Effectiveness Notes: Process isolation is also an effective strategy
to mitigate many other kinds of weaknesses.


Phase: Build and Compilation

Description: Include serialization instructions (for example, LFENCE)
that prevent processor events or mis-predictions prior to the
serialization instruction from causing transient execution after the
serialization instruction. For some weaknesses, a serialization
instruction can also prevent a processor event or a mis-prediction
from occurring after the serialization instruction (for example,
CVE-2018-3639 can allow a processor to predict that a load will not
depend on an older store; a serialization instruction between the
store and the load may allow the store to update memory and prevent
the mis-prediction from happening at all).

Effectiveness: Moderate

Effectiveness Notes: When used to comprehensively mitigate a transient
execution weakness, serialization instructions can introduce
significant performance overhead.


Phase: Build and Compilation

Description: Use software techniques that can mitigate the
consequences of transient execution. For example, address masking can
be used in some circumstances to prevent out-of-bounds transient
reads.

Effectiveness: Limited

Effectiveness Notes: Address masking and related software mitigation
techniques have been used to harden specific code sequences that could
potentially be exploited via transient execution. For example, the
Linux kernel makes limited use of this technique to mitigate
bounds-check bypass [REF-1].


Phase: Build and Compilation

Description: If the weakness is exposed by a single instruction (or a
small set of instructions), then the compiler (or JIT, etc.) can be
configured to prevent the affected instruction(s) from being
generated, and instead generate an alternate sequence of instructions
that is not affected by the weakness.

Effectiveness: Limited

Effectiveness Notes: This technique is only effective for software
that is compiled with this mitigation.


Phase: Documentation

Description: If a hardware feature can allow incorrect or stale data
to be forwarded to transient operations, the hardware designer may opt
to disclose this behavior in architecture documentation. This
documentation can inform users about potential consequences and
effective mitigations.

Effectiveness: High

Effectiveness Notes: None


DETECTION METHODS:

Method: Automated Static Analysis

Desc: A variety of automated static analysis tools can identify
potentially exploitable code sequences in software. These tools may
perform the analysis on source code, on binary code, or on an
intermediate code representation (for example, during compilation).


Method: Manual Analysis

Desc: This weakness can be detected in hardware by manually
inspecting processor specifications. Features that exhibit this
weakness may include microarchitectural predictors, access control
checks that occur out-of-order, or any other features that can allow
operations to execute without committing to architectural state.


Method: Automated Analysis

Desc: Software vendors can release tools that detect presence of known
weaknesses on a processor. For example, some of these tools can
attempt to transiently execute a vulnerable code sequence and detect
whether code successfully leaks data in a manner consistent with the
weakness under test. Alternatively, some hardware vendors provide
enumeration for the presence of a weakness (or lack of a
weakness). These enumeration bits can be checked and reported by
system software. For example, Linux supports these checks for many
commodity processors:

$ cat /proc/cpuinfo | grep bugs | head -n 1

bugs            : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit srbds mmio_stale_data retbleed


VULNERABILITY MAPPING NOTES:

Usage: Allowed

Reason: Acceptable-Use

Rationale: Use only when the weakness arises from forwarding of
incorrect/stale data, and the data is not architecturally restricted
(that is, the forwarded data is accessible within the current
processor context).

Comments: If a weakness arises from forwarding of incorrect/stale data
that is not accessible within the current processor context, then
CWE-B (CWE-1421) may be more appropriate for the mapping task.


RELATED WEAKNESSES:

RelType: ChildOf

ID: CWE-A / CWE-1420

View-ID: CWE-1000


RelType: MemberOf

ID: CWE-1198

View-ID: CWE-1194



RelType: MemberOf

ID: CWE-1201

View-ID: CWE-1194



RelType: MemberOf

ID: CWE-1202

View-ID: CWE-1194


REFERENCES:

Title: [REF-1] Speculation

Author: The kernel development community.

Date: 2020-08-16

URL: https://docs.kernel.org/6.6/staging/speculation.html


Title: [REF-2] LVI : Hijacking Transient Execution through Microarchitectural Load Value Injection

Author: Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens.

Date: 2020-01-09

URL: https://lviattack.eu/lvi.pdf


Title: [REF-3] Fast Store Forwarding Predictor

Author: Intel Corporation.

Date: 2022-02-08

URL: https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/technical-documentation/fast-store-forwarding-predictor.html


Title: [REF-4] Security Analysis Of AMD Predictive Store Forwarding

Author: AMD

Date: No Date

URL: https://www.amd.com/system/files/documents/security-analysis-predictive-store-forwarding.pdf


Title: [REF-10] You Cannot Always Win the Race: Analyzing the LFENCE/JMP Mitigation for Branch Target Injection.

Author: Alyssa Milburn, Ke Sun, Henrique Kawakami.

Date: 2022-03-08

URL: https://arxiv.org/abs/2203.04277


ACTIVE ISSUES:



RESOLVED ISSUES:



TIMELINE:

Received: 2023-09-19

Ack-Receipt: 2023-09-19

Init-Review: 2023-09-19

Init-Consultation: YYYY-MM-DD

Init-Rejected: YYYY-MM-DD

Init-Accepted: 2023-09-19

Full-Sub-Requested: YYYY-MM-DD

Full-Sub-Received: 2023-12-21

Full-Review: 2024-01-02

Full-Consultation: YYYY-MM-DD

Full-Accepted: 2024-01-22

Production: 2024-01-24

CWE-Assigned: 2024-01-30

CWE-Modified: YYYY-MM-DD

Final-Coord: 2024-02-14

CWE-Published: 2024-02-29

Post-Publication: 2024-03-08

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
