SUBMISSION COMMUNICATION ID: ES2406-9e5fcf10

ACTION TYPE: New Entry

SUBMISSION STATUS: Det-Requested

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2024-06-28 18:17:29

ISSUES: yes/active

ISSUE DETAILS: SUB.MISC, SUB.COORD

PUBTRACKER: #114

MTRACKER: #1103

GITHUBUSER: lilyjw

SUBMISSION TYPE: Software

NAME: Insecure Setting of Generative AI/ML Model Inference Parameters

SUMMARY:

The product has a component that relies on a generative AI/ML model,
but the model is configured with incorrect inference parameters that
produce excessive erroneous or unexpected outputs that violate the
intended security policy.

EXTENDED DESCRIPTION:

Generative AI/ML models, such as those used for text generation, image
synthesis, and other creative tasks, rely on inference parameters that
control model behavior, such as temperature, Top P, and Top K. These
parameters affect the model's internal decision-making processes,
learning rate, and probability distributions. Incorrect settings can
lead to unusual behavior such as "hallucinations" in text generation,
unrealistic images, or failure to converge during training. The impact
of such misconfigurations can compromise the integrity of the
application. If the results are used in security-critical operations
or decisions, then this could violate the intended security policy,
i.e., introduce a vulnerability.


MODES OF INTRODUCTION:

# This provides information about how and when a given weakness may be
# introduced. Information should list the Phase of the development life
# cycle in which the weakness can introduced. A descriptive Note is
# optional but preferred.
# 
# If the weakness can be introduced in multiple phases, include separate
# items for each Phase. Copy and paste as needed.
# 

# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#introduction


Phase: <<PHASE1>>

Note: During model training, hyperparameters may be set without
adequate validation or understanding of their impact.


Phase: <<PHASE2>>

Note: During deployment, model parameters may be adjusted to optimize
performance without comprehensive testing.


Phase: <<PHASE3>>

Note: Updates or modifications may be made to the model that alter its
behavior without thorough re-evaluation.




===============================================================

APPLICABLE PLATFORMS:

# This element specifies the programming languages, operating systems,
# architectures, and technologies in which this weakness is usually
# found. If an element does not apply to this submission, you can use
# the "Not X-Specific" where "X" is the type of element.

# If there are multiple languages, OSes, architectures, and/or
# technologies, then list each one separately.
# 
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#platforms

# Values for Prevalence: Often, Sometimes, Rarely, Undetermined



Language Class: Not Language-Specific
Prevalence: <<PREVALENCE1>>



Operating System Class: Not OS-Specific
Prevalence: <<PREVALENCE1>>




Architecture Class: Not Architecture-Specific
Prevalence: <<PREVALENCE1>>


Technology Name: AI/ML
Prevalence: <<PREVALENCE1>>

	
Technology Class: Not Technology-Specific
Prevalence: <<PREVALENCE1>>


===============================================================

COMMON CONSEQUENCES:

# This element will cover the typical negative security impact (or
# impacts) that occurs if this weakness can be exploited by an
# attacker. Each Consequence must include a Scope and Impact. Both the
# Likelihood and Note elements are optional.
#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#conseq



# Values for Scope: Confidentiality, Integrity, Availability, Access
#    Control, Accountability, Authentication, Authorization,
#    Non-Repudiation, Other


# Values for Impact: Modify Memory, Read Memory, Modify Files or
#    Directories, Read Files or Directories, Modify Application Data,
#    Read Application Data, DoS: Crash, Exit, or Restart, DoS:
#    Amplification, DoS: Instability, DoS: Resource Consumption (CPU),
#    DoS: Resource Consumption (Memory), DoS: Resource Consumption
#    (Other), Execute Unauthorized Code or Commands, Gain Privileges
#    or Assume Identity, Bypass Protection Mechanism, Hide Activities,
#    Alter Execution Logic, Quality Degradation, Unexpected State,
#    Varies by Context, Reduce Maintainability, Reduce Performance,
#    Reduce Reliability, Other


# Values for Likelihood: High, Medium, Low, Unknown


Scope: Integrity, Other

Impact: Varies by Context; Unexpected State

Likelihood: <<LIKELIHOOD1>>

Note: Generation of inaccurate, misleading, or nonsensical information.




Scope: Other

Impact: Alter Execution Logic; Unexpected State; Varies by Context

Likelihood: <<LIKELIHOOD2>>

Note: Propagation of errors if outputs are used in critical decision-making processes.




Scope: <<SCOPE3>>

Impact: <<IMPACT3a>>; <<IMPACT3b>>; <<IMPACT3c>>

Likelihood: <<LIKELIHOOD3>>

Note: <<put the information here>>



Scope: <<SCOPE4>>

Impact: <<IMPACT4a>>; <<IMPACT4b>>; <<IMPACT4c>>

Likelihood: <<LIKELIHOOD4>>

Note: <<put the information here>>



===============================================================


# 8. DEMONSTRATIVE EXAMPLES (required)

DEMONSTRATIVE EXAMPLES:

# The entry should have one or more demonstrative examples, but
# submitters should not put significant effort into these until the CWE
# team has reviewed and accepted the general concepts behind the
# submission. Submissions can include example information for either
# Software, Hardware, or both, as relevant.

# "BAD CODE" and "GOOD CODE" can be code snippets, descriptions of a
# design or architecture, or an algorithm or protocol.
#
# * If you would like to submit diagrams/images to support any
# weakness descriptive examples, please attach it to the email
# submission in a png format and reference it by filename where
# desired. For an example, please see:
# https://cwe.mitre.org/data/definitions/1256.html

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#demox

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other


INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


---------------

INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>



===============================================================


OBSERVED EXAMPLES:

# Where known, the submission should identify multiple
# publicly-reported vulnerabilities in real-world products that
# exhibit the weakness. If possible, include CVE Identifier, its
# corresponding weblink, and a short summary. If a CVE ID is
# unavailable, use the Link to point to the reference that explains
# the vulnerability.

# The ID should be the CVE Identifier, if available. If not available,
# then supply a title or alternate ID used by the reference.

# The Link should be the URL to the reference that explains the
# weakness that leads to the vulnerability.

# The ObexSummary should be a brief sentence or two that focuses solely on
# the weakness in the affected product.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#obex

ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: <<SUM1>>


ID: <<CVE2>>

Link: <<LINK2>>

ObexSummary: <<SUM2>>


ID: <<CVE3>>

Link: <<LINK3>>

ObexSummary: <<SUM3>>


ID: <<CVE4>>

Link: <<LINK4>>

ObexSummary: <<SUM4>>



===============================================================


DETECTION METHODS:

# Detection Methods should identify commonly-used methods of finding
# the weakness within the product's code, design, etc. This is NOT
# intended for detecting how the weakness is exploited in a
# vulnerability. There can be one or more methods provided.

# Values for Method: Automated Analysis, Automated Dynamic Analysis,
#    Automated Static Analysis, Automated Static Analysis - Source
#    Code, Automated Static Analysis - Binary or Bytecode, Fuzzing,
#    Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis,
#    Manual Static Analysis - Source Code, Manual Static Analysis -
#    Binary or Bytecode, White Box, Black Box, Architecture or Design
#    Review, Dynamic Analysis with Manual Results Interpretation,
#    Dynamic Analysis with Automated Results Interpretation, Formal
#    Verification, Simulation / Emulation, Other

# Values for Effectiveness: High, Moderate, Opportunistic, Limited, None

Method: <<METHOD1>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS1>>

Notes: <<put the information here>>


Method: <<METHOD2>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS2>>

Notes: <<put the information here>>


Method: <<METHOD3>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS3>>

Notes: <<put the information here>>



===============================================================


POTENTIAL MITIGATIONS:

# This element should cover one or more techniques that will eliminate
# and/or reduce the frequency or impact of the weakness. Each mitigation
# must include a Phase and Description, while the Effectiveness element
# is optional. A descriptive Effectiveness Note is also optional.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#mitigations


# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

# Values for Effectiveness: High, Moderate, Limited, Incidental,
#    Discouraged Common Practice, Defense in Depth, None


Phase: Implementation; System Configuration; Operation

Description: Develop and adhere to robust parameter tuning processes
that include extensive testing and validation.

Effectiveness: <<EFFECT1>>

Effectiveness Notes: <<put the information here>>


Phase: Implementation; System Configuration; Operation

Description: Implement feedback mechanisms to continuously assess and
adjust model performance.

Effectiveness: <<EFFECT2>>

Effectiveness Notes: <<put the information here>>


Phase: Documentation

Description: Provide comprehensive documentation and guidelines for
parameter settings to ensure consistent and accurate model behavior.

Effectiveness: <<EFFECT3>>

Effectiveness Notes: <<put the information here>>




RELATED WEAKNESSES:

RelType: ChildOf
ID: CWE-440
View-ID: 1000

RelType: ChildOf
ID: CWE-665
View-ID: 1000

RelType: Other
ID: CWE-696
View-ID: 1000

RelType: Other
ID: CWE-691
View-ID: 1000



REFERENCES:

Title: Documentation for Transformers text generation parameters

URL: https://huggingface.co/docs/transformers/main_classes/text_generation#transformers.GenerationConfig

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>



Title: <<put the information here>>

URL: <<put the information here>>

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: <<put the information here>>

URL: <<put the information here>>

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>



ACTIVE ISSUES:

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: The name and description were discussed and refined in
multiple meetings. They are nearly complete, pending further
discussion. The name/description were updated based on WG discussion
in CDR and the 2025-02-28 AI WG meeting. They are now sufficiently
clear to allow moving the submission to Stage 2.

Response: [NO RESPONSE NEEDED; DETAILED DISCUSSION IS ONGOING.]

----------

SUB.COORD - "Requires extensive coordination"

Description: The submission will require or is currently undergoing close
coordination, discussion, and debate between multiple parties with
different perspectives and opinions.  The communication could be taking
place in CDR itself, or outside of CDR.  As a result, it might take longer
to move the submission to later phases, although the submission is expected
to be more robust and well-defined as a result of this coordination.

Resolution: The submission cannot progress past the Init-Consultation or
Det-Consultation phases until sufficient consensus has been reached, or if
the CWE Team decides to move the submission to the next phase.

Comments: This submission is undergoing active review and development
within the CWE AI Working Group.

Response: [NO RESPONSE NEEDED; DETAILED DISCUSSION IS ONGOING.]



RESOLVED ISSUES:

SUB.NEWTECH - "New/Emerging Technology"

Description: The submission is related to a new or emerging technology that
is not well-understood from a weakness perspective, which can cause real or
perceived gaps in CWE that require extra effort and time to analyze.
Typically, for new/emerging technologies, early vulnerability discovery and
research does not focus on root cause analysis (i.e., weakness
identification). Instead, the focus is on other areas such as attacks and
exploitation methods, technical impacts, threats, mitigations, or other
concerns.  As a result, industry understanding can be limited, effectively
requiring research or focused efforts by SMEs to understand the underlying
weaknesses.  Rapidly-changing, diverse terminology and technology can
further complicate understanding. Finally, there might not be enough
real-world examples with sufficient details from which weakness patterns
may be discovered.  For this reason, it can be difficult to determine
whether CWE entries already cover the topics of concern, and which gaps (if
any) exist.  As of May 2024, some new or emerging technologies include
AI/ML, cryptocurrency/blockchain, post-quantum cryptography, and
large-scale architectures with many components that have different trust
boundaries.  In previous years, new/emerging domains for CWE included
hardware, cloud, and ICS/OT.

Resolution: The submission cannot progress past the Init-Consultation or
Det-Consultation phases until sufficient attempts have been made to
understand the weaknesses commonly seen in new or emerging technologies, or
if the CWE Team decides to move the submission to the next phase.  Analysis
could include analyzing well-known attacks to understand the weaknesses
that enable the attacks to succeed; analysis of mitigations to understand
how the underlying weaknesses are perceived; and/or other methods.  Such
analysis might require consultation with a variety of Subject Matter
Experts (SMEs).

Comments: Since AI/ML weakness classification is new, it might require
some effort to determine the best way to clarify this
weakness. However, as of February 14, 2025, discussion by CWE AI WG
members does not suggest that there are substantive problems with
characterizing a weakness in terms of parameters to AI/ML
products.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED.]

----------

SUB.ABS.LOWLEVEL - "Low level of abstraction"

Description: The submission identifies an issue, but its abstraction might
be too low-level to merit its own CWE entry. If it is focused on a
particular technology, framework, protocol, or function, then it might not
be unique enough to get its own CWE ID.  This might lead to modification of
an existing entry to include the additional details, or creation of a
higher-level entry for which the submission is one example. (Note: some
older CWE entries have this problem and would not be published today,
generally because they were too specific to a particular language.)

Resolution: The submission will be allowed to progress to later phases once
the more-general concept is appropriately identified and described. The
original, lower-level submission will serve as a primary example of the
more general concept.

Comments: In the 2025-02-28 AI WG meeting, the submission was
generalized to include multiple kinds of generative AI, not just
Transformers and text generation. Lower-level children could be
created in the future if necessary.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED.]

----------

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the Publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: It is not clear what CWEs would be related to this weakness,
although this problem does not need to be fully resolved in this
stage. Relationships might depend on the kinds of behaviors that are
affected by the chosen parameters. Within CWE, "poor configuration" is
not itself a weakness - it is more like a phase or activity in the
development lifecycle that controls or affects the behavior of a
product. Since CWE weaknesses are focused on behavior, it will be
important to understand the behavior-related implications of model
parameters in order to determine the relationships.  Somewhat related
weaknesses include CWE-440: Expected Behavior Violation (which is
defined relative to a specification) or its parent CWE-684: Incorrect
Provision of Specified Functionality. Alternately there is CWE-696:
Incorrect Behavior Order as a child of CWE-691: Insufficient Control
Flow Management.  Please acknowledge that you have seen this comment;
no additional discussion is necessary at this time.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED.] During the February 28
WG meeting, these relationships were discussed, and there was general
agreement that it made sense to capture relationships with CWE-440 and
CWE-665 (Improper Initialization).




TIMELINE:

Received: 2024-06-28

Ack-Receipt: 2024-07-02

Init-Review: 2025-02-04

Init-Consultation: 2025-02-14

Init-Declined: YYYY-MM-DD

Init-Accepted: 2025-03-02

Det-Requested: 2025-03-24

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD




COMMUNICATIONS LOG:
2024-07-02 sent email
2025-01-31 action meeting
2025-02-04 sent email
2025-02-14 action meeting
2025-02-14 sent email
2025-02-28 action meeting
2025-03-02 sent email
2025-03-24 sent email
