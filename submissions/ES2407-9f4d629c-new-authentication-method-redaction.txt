SUBMISSION COMMUNICATION ID: ES2407-9f4d629c

ACTION TYPE: New Entry

SUBMISSION STATUS: Init-Consultation

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2024-07-05 14:04:55

ISSUES: yes/active

ISSUE DETAILS: SUB.UNCLEAR, SUB.ATTACK

PUBTRACKER: #117

MTRACKER: #1115

GITHUBUSER: 

SUBMISSION TYPE: Software

NAME: Authentication Method Redaction

DESCRIPTION:

## General Explanation
Authentication Method Redaction (AMR) refers to a security vulnerability
where an attacker can manipulate the user interface to hide or remove
secure authentication options, leading users to fall back on less secure
methods. This manipulation can be achieved through altering HTML, CSS,
images, or JavaScript on a login page, effectively controlling the
authentication flow presented to the user. The ability to manipulate the
presentation layer is built-in to AitM phishing kits such as EvilGinx.

## Why This Should Be a Concern to Developers/Designers
AMR is a critical concern because it undermines the security of advanced
authentication mechanisms by forcing users to rely on weaker alternatives.
This weakness is particularly problematic in environments where robust
authentication methods, such as passkeys, are available but not enforced
due to potential manipulation by attackers. When these secure options are
hidden, users might unknowingly provide their credentials through less
secure methods, which can be intercepted and exploited by adversaries.

## Technical Impact
The primary technical impact of AMR is the circumvention of strong
authentication mechanisms, leading to successful phishing attacks and
unauthorized access. Attackers can capture credentials, session tokens, and
other sensitive information, allowing them to maintain persistent access to
the victim's account. This vulnerability also facilitates secondary
attacks, such as credential stuffing and account takeover across different
platforms.

## Subtleties and Variations
 - Fallback Authentication Methods: Many implementations offer fallback
options like passwords, security questions, or SMS codes when the primary
method (e.g., passkeys) is not available. These fallback methods are often
less secure and can be easily intercepted in an AMR scenario.
 - User Awareness: Users are generally not familiar with advanced
authentication methods like passkeys and may not notice their absence
during the login process, increasing the likelihood of falling for AMR
attacks.
 - Account Recovery Challenges: Secure account recovery often relies on
less secure methods, making it difficult to design a completely
AitM-resistant authentication flow.
 - Enterprise vs. Consumer Implementations: Enterprise solutions may offer
more robust policies and configurations to mitigate AMR risks, while
consumer implementations might lack such controls, making them more
vulnerable.

## Example: Passkey Bypass in GitHub
An example of AMR is the bypass of passkey authentication on GitHub using
the Evilginx AitM software. Attackers proxy the login page and modify it to
remove the "Sign in with a passkey" option. Users, unaware of the
manipulation, enter their username and password, which the attacker
captures along with session tokens. This bypass not only compromises the
account but also allows the attacker to maintain persistent access. At the
time of this writing, other platforms like Microsoft Live, Amazon Shopping,
NVIDIA, CVS, Coinbase and many others also exhibit similar vulnerabilities
in their passkeys implementation, highlighting the widespread nature of AMR
issues.

## Conclusion
AMR is a significant security weakness that compromises the integrity of
secure authentication methods. Developers and designers must be aware of
this vulnerability and implement robust measures to ensure that secure
authentication options are difficult to redact from the authentication
flow, fallback authentication methods break out of AitM-controlled
sessions, and account recovery mechanisms are adequately protected.

RELATED WEAKNESSES:

   ChildOf CWE-693

REFERENCES:

Title: Securing Passkeys: Thwarting Authentication Method Redaction Attacks
URL: https://www.esentire.com/blog/securing-passkeys-thwarting-authentication-method-redaction-attacks


ACTIVE ISSUES:


SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: A submission cannot progress past the consultation phase until
SUB.UNCLEAR is addressed.

Comments: This submission does not highlight the mistake that is
causing the situation in which the user interface, HTML, CSS, etc.,
can be manipulated. Please provide details on any mistake that
warrants a new CWE.

Response: <SUBMITTER SHOULD REPLY HERE>


----------

SUB.ATTACK - "Too attack-focused"

Description: The submission's name and/or description emphasizes the
attack, not the weakness. Either the submission's weakness is not
well-understood, or it is better described as an attack pattern, which may
be suitable for inclusion in CAPEC.

Resolution: An initial submission cannot progress to later phases unless it
also includes a clear weakness (i.e., is not subject to SUB.UNCLEAR).

Comments: The entire description is focused on the attack, technical
impact, and consequences. There is not any detail about the underlying
weakness that puts the adversary into a position to conduct the attack
by manipulating the user interface.  It seems possible that many
different weaknesses could allow the manipulation of the user
interface in order to perform the attack.  Please provide details on
the mistake that was made. If there is no new weakness for CWE to
cover, it may be possible to capture this attack as a modification to
existing CWE(s) that enable the UI to be modified.

Response: <SUBMITTER SHOULD REPLY HERE>


----------

RESOLVED ISSUES:



TIMELINE:

Received: 2024-07-05

Ack-Receipt: 2024-07-31

Init-Review: 2025-01-28

Init-Consultation: 2025-05-20

Init-Declined: YYYY-MM-DD

Init-Accepted: YYYY-MM-DD

Det-Requested: YYYY-MM-DD

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD




COMMUNICATIONS LOG:
2024-07-31 sent email
2025-01-28 sent email
2025-05-20 sent email
