SUBMISSION COMMUNICATION ID: ES2211-684d4e45

ACTION TYPE: New Entry

SUBMISSION STATUS: Init-Consultation

AFFECTED CWES:

ORIGIN: sub-server

SUBMISSION DATE: 2022-11-30 13:00:12

ISSUES: yes/active

ISSUE DETAILS: SUB.UNCLEAR, SUB.OVERLAP

PUBTRACKER: #11

MTRACKER: #687

GITHUBUSER: mbiesiad

SUBMISSION TYPE: Software

NAME: Improper validation of user identity during changing password action leads to Account Takeover

DESCRIPTION:

Immediate update of user email without proper check of the correctness of
the entered e-mail address can provide to bad actor possibility for ATO
(Account Takeover). In this case as a bad actor can be everyone who
received mistaken email. Situation 1 - user misspell address email in
'Change email' form, bad actor click received link and is immediate logged
in. Situation 2 - user made a mistake updating new email address, bad actor
receive an instructions with link to activate new email for account, but
without credentials like password or username can't get access, using
Forgot Password feature bad actor get possibility to set a new password and
takeover user account. Actualy, there is many types of scenarios connected
with mentioned issue. The issues have common part - Immediate update of
user email without proper check of the correctness of the entered e-mail
address (lack of confirmations that only a real user can do).

RELATED WEAKNESSES:

   ChildOf CWE-640
   Other CWE-345

REFERENCES:

Title: How can a user recover a mistyped email account
URL: https://ux.stackexchange.com/questions/105807/how-can-a-user-recover-a-mistyped-email-account




ACTIVE ISSUES:



SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: An initial submission (or full submission) cannot progress past
the consultation phase until SUB.UNCLEAR is addressed.

Comments: The actual weakness is not fully apparent based on the given description.  From what we can gather based on
the scenarios and cited reference, the actual weakness is something along the lines of "Use of password recovery mechanism
with unverified email".  The emphasis here is the unverified email.  Please let us know if you think we have captured the
intended weakness or if you see the weakness as being something different.  

Response: Sorry if I was not clear and thank you for understanding.

"From what we can gather based on the scenarios and cited reference, the
actual weakness is something along the lines of "Use of password recovery
mechanism with unverified email""" No, it's not about this. The issue is
larger ('password recovery mechanism' is no needed here to show the
software weakness - it can be used by malicious actor, but also can not
occur at all - depends on app logic mechanism/flow).

'The emphasis here is the unverified email' - agree.

Please let me try to explain the issue flow below.

User (account owner) used Change Email feature (because of some reason) ->
changing email address to another one made a typo/mistake -> (here is an
app logic flow [*1]) -> malicious actor gained ATO (Account Takeover).

[*1] it can be as a sent link for verification of 'new email address' -
here attacker (malicious actor - even as a random receiver) just use this
link and we can see example of the ATO (Account Takeover) in the fastest
way. Other example can be: just a message sent to 'new email address' about
this action - here, mentioned random receiver (malicious actor) can use
features like Recovery password feature to get an access and finish with
ATO.

Real life attack example - attacker suppose that victim will update email
address to another one (for example using recon/reconnaissance or just know
the victim etc) - malicious actor creates few emails similar like victim's
second one, but with typical (from human point of view and the best from
victim's language point of view) possible typos. Now, just wait for user
(victim) mistake. (an effort of attacker = creating new emails similar to
victim's, but if attack will be succeed will make Account Takeover, so in
many cases worth of few minutes of creating new emails) Note: shortcut 'new
emails' means 'new emails addresses'.

But I suppose that more than attack above, more important threat is 'random
receiver' which can be malicious actor - scenario: victim changed email
with the typo - malicious receiver want to use this info and finish with
Account Takeover.

Currently, I saw many vulnerable products and less products with proper
solutions (protection against this), so I suppose it could be start
protected. (it is product weakness, as we can agree that for example
'CWE-521: Weak Password Requirements' is a product weakness too)


----------

SUB.OVERLAP - "Duplicate/Overlap"

Description: The submission identifies a weakness, but it is a duplicate of
(or partially overlaps) existing weaknesses, indicating problems with the
submission or associated CWE entries.

Resolution: The submission cannot progress to later phases until (1) the
duplicate/overlap is understood and (2) it is clear how to resolve this
duplicate/overlap.

Comments: While this submission does not overlap with an existing weakness, it is important to highlight potential
overlap with exising submissions.  The overlap that we currently see is with 
ES2206-33c5627d-bad-account-creation-logic.txt, ES2206-d46a8c14-lack-of-reporting-in-links-for-account.txt, and 
ES2206-feb8f4c9-non-expiring-links-for-account.txt.  These current submissions are all related to account creation or
modification which includes email addresses.  Further consideration will be needed as these submissions are moved through
the process to avoid duplicate content.

Response: 
Referring here I am based on the original .txt file
(https://github.com/CWE-CAPEC/CWE-Content-Development-Repository/blob/main/submissions/),
I mean I didn't checked the current progress of mentioned issues, as well
as comments or other activity (because these .txt files were mentioned in
the answer from you). Please let me know if I should.

https://github.com/CWE-CAPEC/CWE-Content-Development-Repository/blob/main/submissions/ES2206-feb8f4c9-non-expiring-links-for-account.txt
It is not connected with the issue. It is mainly focused on 'non expiring
links for account txt' (in my opinion it could be used as additional layer
of security, but in general it is separate topic)

https://github.com/CWE-CAPEC/CWE-Content-Development-Repository/blob/main/submissions/ES2206-33c5627d-bad-account-creation-logic.txt
Looks similar, but it is focused on 'creation process ' ("The product
provides account creation"). As similar part for me is sentence 'it does
not ensure that the external identifier is actually under the control of
the entity registering the account' - sounds good and professional, and is
almost connected with this issue. Sentence could be used, but little
modified like here (ending is modified): "it does not ensure that the
external identifier is actually under the control of the account's entity"
This change means separate issue, because is not focused on 'creation or
registration process', but on the Change Email feature.

https://github.com/CWE-CAPEC/CWE-Content-Development-Repository/blob/main/submissions/ES2206-d46a8c14-lack-of-reporting-in-links-for-account.txt
It looks similar too, but it is also separate issue for me, because of:
"Failure to send a notification or verification message can allow attackers
to silently create new accounts or modify existing ones without users being
aware that their identity is being used or linked to attacker controlled
accounts." it is separate topic. Bad actor can not directly 'attack' the
victim, but can wait for failure and exploit small mistake as a typo - as a
result can make one of the biggest issue for the victim, which is Account
Takeover (ATO).

Mentioned issue is focused on Change Email feature, which is very popular
on the products, because it is useful and it should appear even because of
security reasons (compromised account -> change passwords and/or email -
depends on compromised type). But it should be protected (implemented in
secure way) as well, as other parts of the product.

I hope it will be useful for you, if any questions I am at your disposal /
please feel free to ask.



RESOLVED ISSUES:



TIMELINE:

Received: 2022-11-30

Ack-Receipt: 2022-12-01

Init-Review: 2023-02-07

Init-Consultation: 2024-06-27

Init-Declined: YYYY-MM-DD

Init-Accepted: YYYY-MM-DD

Det-Requested: YYYY-MM-DD

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-12-01 sent email
2023-02-05 received email
2023-02-07 sent email
2023-09-12 publish server
2024-06-27 sent email
2024-09-19 received comment
