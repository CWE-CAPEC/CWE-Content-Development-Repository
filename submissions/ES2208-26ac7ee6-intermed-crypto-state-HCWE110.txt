SUBMISSION COMMUNICATION ID: ES2208-26ac7ee6

ALTERNATE ID: HCWE110

ACTION TYPE: New Entry

SUBMISSION STATUS: Det-Requested

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2022-08-15 21:12:21

ISSUES: yes/active

ISSUE DETAILS: SUB.RELS

PUBTRACKER: #17

MTRACKER: #624

GITHUBUSER: anmeza

SUBMISSION TYPE: Hardware

NAME: Driving Intermediate Cryptographic State/Results to Hardware Module Outputs

DESCRIPTION:

A hardware module implementing a cryptographic algorithm writes
sensitive information about the intermediate state or results of its
cryptographic operations via one of its output wires (typically the
output port containing the final result).


MODES OF INTRODUCTION:

# This provides information about how and when a given weakness may be
# introduced. Information should list the Phase of the development life
# cycle in which the weakness can introduced. A descriptive Note is
# optional but preferred.
# 
# If the weakness can be introduced in multiple phases, include separate
# items for each Phase. Copy and paste as needed.
# 

# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#introduction


Phase: <<PHASE1>>

Note: <<put the information here>>


Phase: <<PHASE2>>

Note: <<put the information here>>


************************************************************************************************

APPLICABLE PLATFORMS:

# This element specifies the programming languages, operating systems,
# architectures, and technologies in which this weakness is usually
# found. If an element does not apply to this submission, you can use
# the "Not X-Specific" where "X" is the type of element.

# If there are multiple languages, OSes, architectures, and/or
# technologies, then list each one separately.
# 
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#platforms


# Values for Prevalence: Often, Sometimes, Rarely, Undetermined

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other

Language Name: <<LANGUAGE1>>
Prevalence: <<PREVALENCE1>>


Language Name: <<LANGUAGE2>>
Prevalence: <<PREVALENCE2>>


Language Name: <<LANGUAGE3>>
Prevalence: <<PREVALENCE3>>


# Values for Language Class: Assembly, Compiled, Hardware Description
#    Language, Interpreted, Not Language-Specific

Language Class: <<LANGCLASS1>>
Prevalence: <<PREVALENCE1>>

Language Class: <<LANGCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Name: AIX, Android, BlackBerry OS,
#    Chrome OS, Darwin, FreeBSD, iOS, macOS, NetBSD, OpenBSD, Red Hat,
#    Solaris, SUSE, tvOS, Ubuntu, watchOS, Windows 9x, Windows
#    Embedded, Windows NT

Operating System Name: <<OS1>>
Prevalence: <<PREVALENCE1>>

Operating System Name: <<OS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Class: Linux, macOS, Unix, Windows,
#    Not OS-Specific


Operating System Class: <<OSCLASS1>>
Prevalence: <<PREVALENCE1>>

Operating System Class: <<OSCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Architecture Name: Alpha, ARM, Itanium, Power
#     Architecture, SPARC, x86, Other


Architecture Name: <<ARCH1>>
Prevalence: <<PREVALENCE1>>

Architecture Name: <<ARCH2>>
Prevalence: <<PREVALENCE2>>

Architecture Name: <<ARCH3>>
Prevalence: <<PREVALENCE3>>


# Values for Architecture Class: Embedded, Microcomputer, Workstation,
#     Not Architecture-Specific

Architecture Class: <<ARCHCLASS1>>
Prevalence: <<PREVALENCE1>>

Architecture Class: <<ARCHCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Technology Name: Web Server, Database Server, Accelerator
#    Hardware, Analog and Mixed Signal Hardware, Audio/Video Hardware,
#    Bus/Interface Hardware, Clock/Counter Hardware, Communication
#    Hardware, Controller Hardware, Memory Hardware, Microcontroller
#    Hardware, Network on Chip Hardware, Power Management Hardware,
#    Processor Hardware, Security Hardware, Sensor Hardware, Storage
#    Hardware, Test/Debug Hardware


Technology Name: <<TECH1>>
Prevalence: <<PREVALENCE1>>

Technology Name: <<TECH2>>
Prevalence: <<PREVALENCE2>>

Technology Name: <<TECH3>>
Prevalence: <<PREVALENCE3>>


# Values for Technology Class: Client Server, Cloud Computing, ICS/OT,
#     Mainframe, Mobile, N-Tier, SOA, System on Chip, Web Based, Not
#     Technology-Specific
	
Technology Class: <<TECHCLASS1>>
Prevalence: <<PREVALENCE1>>

Technology Class: <<TECHCLASS2>>
Prevalence: <<PREVALENCE2>>


************************************************************************************************

COMMON CONSEQUENCES:

# This element will cover the typical negative security impact (or
# impacts) that occurs if this weakness can be exploited by an
# attacker. Each Consequence must include a Scope and Impact. Both the
# Likelihood and Note elements are optional.
#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#conseq



# Values for Scope: Confidentiality, Integrity, Availability, Access
#    Control, Accountability, Authentication, Authorization,
#    Non-Repudiation, Other


# Values for Impact: Modify Memory, Read Memory, Modify Files or
#    Directories, Read Files or Directories, Modify Application Data,
#    Read Application Data, DoS: Crash, Exit, or Restart, DoS:
#    Amplification, DoS: Instability, DoS: Resource Consumption (CPU),
#    DoS: Resource Consumption (Memory), DoS: Resource Consumption
#    (Other), Execute Unauthorized Code or Commands, Gain Privileges
#    or Assume Identity, Bypass Protection Mechanism, Hide Activities,
#    Alter Execution Logic, Quality Degradation, Unexpected State,
#    Varies by Context, Reduce Maintainability, Reduce Performance,
#    Reduce Reliability, Other


# Values for Likelihood: High, Medium, Low, Unknown


Scope: Confidentiality

Impact: Read Memory; Read Application Data

Likelihood: <<LIKELIHOOD1>>

Note: Mathematically sound cryptographic algorithms rely on their correct
implementation for security. The algorithms assume that with a given
set of inputs, they will produce a cryptographic result. These
assumptions break when a hardware crypto module leaks intermediate
encryption states or results such that they can be observed by an
adversary. If intermediate state is observed, it can be used by an
attacker to identify the secrets used in the cryptographic operation.


Scope: <<SCOPE2>>

Impact: <<IMPACT2a>>; <<IMPACT2b>>; <<IMPACT2c>>

Likelihood: <<LIKELIHOOD2>>

Note: <<put the information here>>




Scope: <<SCOPE3>>

Impact: <<IMPACT3a>>; <<IMPACT3b>>; <<IMPACT3c>>

Likelihood: <<LIKELIHOOD3>>

Note: <<put the information here>>



************************************************************************************************

DEMONSTRATIVE EXAMPLES:


INTRO TEXT:

The following SystemVerilog code shows an example of a generic crypto
module with and without a “sanitizing” mechanism to mitigate the
exposure of sensitive information (see line 50 in each example).



BAD CODE:
LANGUAGE: SystemVerilog

//////////////////////////////////////////////////////////////
// START: Example of module with weakness                   //
//////////////////////////////////////////////////////////////
01 | module crypto_core_with_leakage
02 | (
03 |     input  clk,
04 |     input  rst,
05 |     input  [127:0] data_i,
06 |     output [127:0] data_o,
07 |     output valid
08 | );
09 |
10 | localparam int total_rounds = 10;
11 | logic [3:0]   round_id_q;
12 | logic [127:0] data_state_q, data_state_d;
13 | logic [127:0] key_state_q, key_state_d;
14 |
15 | crypto_algo_round u_algo_round (
16 |     .clk     (clk),
17 |     .rst     (rst),
18 |     .round_i (round_id_q  ),
19 |     .key_i   (key_state_q ),
20 |     .data_i  (data_state_q),
21 |     .key_o   (key_state_d ),
22 |     .data_o  (data_state_d)
23 | );
24 |
25 | always @(posedge clk) begin
26 |     if (rst) begin
27 |         data_state_q <= 0;
28 |         key_state_q  <= 0;
29 |         round_id_q   <= 0;
30 |     end
31 |     else begin
32 |         case (round_id_q)
33 |             total_rounds: begin
34 |                 data_state_q <= 0;
35 |                 key_state_q  <= 0;
36 |                 round_id_q   <= 0;
37 |             end
38 |
39 |             default: begin
40 |                 data_state_q <= data_state_d;
41 |                 key_state_q  <= key_state_d;
42 |                 round_id_q   <= round_id_q + 1;
43 |             end
44 |         endcase
45 |     end
46 | end
47 |
48 | assign valid  = (round_id_q == total_rounds) ? 1'b1 : 1'b0;
49 |
50 | assign data_o = data_state_q;
51 |
52 | endmodule
//////////////////////////////////////////////////////////////
// END  : Example of module with weakness                   //
//////////////////////////////////////////////////////////////


EXPLANATORY TEXT:

In line 50 above, data_state_q is assigned to data_o. Since data_state_q
contains intermediate state/results, this allows an attacker to obtain
these results through data_o.

In line 50 of the fixed logic below,
while "data_state_q" does not contain the final result, 
a "sanitizing" mechanism drives a safe default value (i.e., 0) to
"data_o" instead of the value of "data_state_q".
In doing so, the mechanism prevents
the exposure of intermediate state/results which could be used to
break soundness of the cryptographic operation being performed. A
real-world example of this weakness and mitigation can be seen in a
pull request that was submitted to the OpenTitan Github repository
[REF-XXX].


GOOD CODE:
LANGUAGE: SystemVerilog

//////////////////////////////////////////////////////////////
// START: Example of module without weakness                //
//////////////////////////////////////////////////////////////
01 | module crypto_core_without_leakage
02 | (
03 |     input  clk,
04 |     input  rst,
05 |     input  [127:0] data_i,
06 |     output [127:0] data_o,
07 |     output valid
08 | );
09 |
10 | localparam int total_rounds = 10;
11 | logic [3:0]   round_id_q;
12 | logic [127:0] data_state_q, data_state_d;
13 | logic [127:0] key_state_q, key_state_d;
14 |
15 | crypto_algo_round u_algo_round (
16 |     .clk     (clk),
17 |     .rst     (rst),
18 |     .round_i (round_id_q  ),
19 |     .key_i   (key_state_q ),
20 |     .data_i  (data_state_q),
21 |     .key_o   (key_state_d ),
22 |     .data_o  (data_state_d)
23 | );
24 |
25 | always @(posedge clk) begin
26 |     if (rst) begin
27 |         data_state_q <= 0;
28 |         key_state_q  <= 0;
29 |         round_id_q   <= 0;
30 |     end
31 |     else begin
32 |         case (round_id_q)
33 |             total_rounds: begin
34 |                 data_state_q <= 0;
35 |                 key_state_q  <= 0;
36 |                 round_id_q   <= 0;
37 |             end
38 |
39 |             default: begin
40 |                 data_state_q <= data_state_d;
41 |                 key_state_q  <= key_state_d;
42 |                 round_id_q   <= round_id_q + 1;
43 |             end
44 |         endcase
45 |     end
46 | end
47 |
48 | assign valid  = (round_id_q == total_rounds) ? 1'b1 : 1'b0;
49 |
50 | assign data_o = (valid) ? data_state_q : 0;
51 |
52 | endmodule
//////////////////////////////////////////////////////////////
// END  : Example of module without weakness                //
//////////////////////////////////////////////////////////////



************************************************************************************************

OBSERVED EXAMPLES:

# Where known, the submission should identify multiple
# publicly-reported vulnerabilities in real-world products that
# exhibit the weakness. If possible, include CVE Identifier, its
# corresponding weblink, and a short summary. If a CVE ID is
# unavailable, use the Link to point to the reference that explains
# the vulnerability.

# The ID should be the CVE Identifier, if available. If not available,
# then supply a title or alternate ID used by the reference.

# The Link should be the URL to the reference that explains the
# weakness that leads to the vulnerability.

# The ObexSummary should be a brief sentence or two that focuses solely on
# the weakness in the affected product.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#obex

ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: <<SUM1>>


ID: <<CVE2>>

Link: <<LINK2>>

ObexSummary: <<SUM2>>


ID: <<CVE3>>

Link: <<LINK3>>

ObexSummary: <<SUM3>>


ID: <<CVE4>>

Link: <<LINK4>>

ObexSummary: <<SUM4>>



************************************************************************************************

DETECTION METHODS:

# Detection Methods should identify commonly-used methods of finding
# the weakness within the product's code, design, etc. This is NOT
# intended for detecting how the weakness is exploited in a
# vulnerability. There can be one or more methods provided.

# Values for Method: Automated Analysis, Automated Dynamic Analysis,
#    Automated Static Analysis, Automated Static Analysis - Source
#    Code, Automated Static Analysis - Binary or Bytecode, Fuzzing,
#    Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis,
#    Manual Static Analysis - Source Code, Manual Static Analysis -
#    Binary or Bytecode, White Box, Black Box, Architecture or Design
#    Review, Dynamic Analysis with Manual Results Interpretation,
#    Dynamic Analysis with Automated Results Interpretation, Formal
#    Verification, Simulation / Emulation, Other

# Values for Effectiveness: High, Moderate, Opportunistic, Limited, None

Method: <<METHOD1>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS1>>

Notes: <<put the information here>>


Method: <<METHOD2>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS2>>

Notes: <<put the information here>>


Method: <<METHOD3>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS3>>

Notes: <<put the information here>>



************************************************************************************************

POTENTIAL MITIGATIONS:

# This element should cover one or more techniques that will eliminate
# and/or reduce the frequency or impact of the weakness. Each mitigation
# must include a Phase and Description, while the Effectiveness element
# is optional. A descriptive Effectiveness Note is also optional.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#mitigations


# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

# Values for Effectiveness: High, Moderate, Limited, Incidental,
#    Discouraged Common Practice, Defense in Depth, None


Phase: <<PHASE1>>

Description: <<put the information here>>

Effectiveness: <<EFFECT1>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE2>>

Description: <<put the information here>>

Effectiveness: <<EFFECT2>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE3>>

Description: <<put the information here>>

Effectiveness: <<EFFECT3>>

Effectiveness Notes: <<put the information here>>



************************************************************************************************

RELATED WEAKNESSES:

RelType: ChildOf
ID: CWE-200
View-ID: 1000

RelType: ChildOf
ID: CWE-497
View-ID: 1000

RelType: MemberOf
ID: CWE-1205
View-ID: 1194

RelType: Other
ID: CWE-1295
View-ID: 1194

RelType: Other
ID: CWE-1258
View-ID: 1194


REFERENCES:


Title: Security Verification of an Open Source Hardware Root of Trust

URL: https://cycuity.com/type/blog/security-verification-of-an-open-source-hardware-root-of-trust/

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: Complete reverse-engineering of AES-like block ciphers by SCARE and FIRE attacks

URL: https://doi.org/10.1007/s12095-014-0112-7

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: Practical Reverse Engineering of Secret Sboxes by Side-Channel Analysis

URL: https://doi.org/10.1109/ISCAS45731.2020.9180848

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: [REF-XXX] [otp_ctrl] Prevent broadcast of scrambler's input/intermediate values #13043

URL: https://github.com/lowRISC/opentitan/pull/13043

Author: Andres Meza

Date: 2022-06-03




ACTIVE ISSUES:

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: The RELATED WEAKNESSES section has been updated based on the
2025-01-22 meeting. This will be further analyzed and refined during
stage 2.

CWE-201 is close but does not apply, since its focus is on the
intentional sending of data when "a portion of the data [that]
includes sensitive information". In this case, the data is sensitive
in and of itself - not just a portion. CWE-212 does not apply, since
the key weakness in this submission is in providing/sending the data
in the first place. CWE-921 does not apply because it is about storage
of data - not transmission.  CWE-1295 and CWE-1258 appear similar,
although they might be most appropriate as chaining relationships.

CWE-497 may be appropriate as a parent, although its current extended
description is software-focused, and the "system" term is intended to
refer to the operating system. However, CWE-497 may still apply here;
consider a SoC with various modules, but the control sphere allows
modules to read information from some modules but not others.

CWE-200 is very general, but because there are no clear children under
which this submission could fit, it may be appropriate as a parent
here. There is a possibility of creating a more-specific
"intermediate" CWE entry between CWE-200 and this submission, roughly
for "sending sensitive data to a destination accessible by untrusted
parties," but the CWE team will investigate this possibility
separately; creation of an intermediate entry may happen independently
and is not expected to slow down conversion of this submission into a
new entry.

Response: [NO RESPONSE NEEDED; DETAILED DISCUSSION IS ONGOING.]




RESOLVED ISSUES:

SCOPE.NOMITS - "No actionable mitigations"

Description: There are no actionable mitigations available to the
developer/designer/manufacturer to prevent or reduce the weakness.

Resolution: Submissions will be reviewed on a case-by-case basis, delayed,
and possibly cited as examples until this exclusion is finalized after
extensive community feedback.

Comments: What would be the mitigation for the issue?

Response:

A hardware module implementing a cryptographic algorithm should
contain mitigations that write a default value, such as all 0s, while
encryption is being conducted. This prevents intermediate
cryptographic state from reaching the output.

[EDITED RESPONSE. A demonstrative example was provided and has been
moved to that section.]

------

SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: An initial submission (or full submission) cannot progress past
the consultation phase until SUB.UNCLEAR is addressed.

Comments:

(1) In the submitter's most recent response to this issue, it appears
that the key weakness is that "designers do not insert
logic/mechanisms [that prevent] sensitive information (i.e.,
intermediate state/results, input values, keys) from being driven to
any outputs." The exposure of this information can occur "since
hardware designs must continuously drive values to their outputs
(wires) (which can be sampled/accessed at any point in time)." Meeting
discussion on 2025-01-22 settled on this description: "A hardware
module implementing a cryptographic algorithm writes sensitive
information about the intermediate state or results of its
cryptographic operations via one of its output wires (typically the
output port) containing the final result."

The name was also discussed on 2025-01-22 and will be changed to:
"Driving Intermediate Cryptographic State/Results to Hardware Module
Outputs".

(2) Based on the previous round of responses by the submitter, we
believe that there are software parallels (to be discussed in the
SUB.RELS issue), but we agree that this submission is appropriate as a
hardware-specific consideration of the problem.

Response: [RESOLVED ISSUE; DO NOT CHANGE]

------

SUB.ACTION - "Unable to determine action"

Description: It is not clear what action to perform based on the
submission, e.g., create new entry, update existing entry, etc.

Resolution: The submission cannot progress to the Internal-Update stage
until the relevant actions(s) are identified.

Comments: In earlier rounds during initial consultation, it was
unclear whether a new entry could be created from this submission, or
if modifications to existing entries were needed. However, the
2025-01-22 meeting resolved the question - this submission should be
treated as a new entry, at the variant level of abstraction.

Response: [RESOLVED ISSUE; DO NOT CHANGE]


------

SUB.ABS.LOWLEVEL - "Low level of abstraction"

Description: Submission identifies an issue, but its abstraction might
be too low-level to merit its own CWE entry. If it is focused on a
particular technology, framework, protocol, or function, then it might
not be unique enough to get its own CWE ID.  This might lead to
modification of an existing entry to include the additional details,
or creation of a higher-level entry for which the submission is one
example. (Note: some older CWE entries have this problem and would not
be published today, generally because they were too specific to a
particular language.)

Resolution: the submission will be allowed to progress to later phases
once the more-general concept is appropriately identified and
described. The original, lower-level submission will serve as a
primary example of the more general concept.

Comments:

(1) In the last round, we asked "Is the weakness or mistake specific
to a particular technology?"  The submitter's reply stated that "The
weakness is not specific to a particular technology and could
reasonably arise in various types of designs (e.g. processor hardware,
SoCs, crypto IP, Bus/Interfaces, etc.) which derive result data from
sensitive information and continuously drive (or stream) those result
data from a secure/trusted location to a potentially
unsecure/untrusted location." Since this applies to a variety of
hardware technologies, we agree that this submission is not too
specific.

(2) We also stated that "'cryptographic state' is a very specific type
of information, which is likely too low-level to receive its own
entry." The submitter replied that "this weakness is especially
impactful for cryptographic accelerators such as AES, HMAC, ECC, and
others." However, the 2025-01-22 meeting led to the conclusion that
retaining this submission at a variant level of abstraction is
appropriate, and that this particular issue is important and common
enough to warrant a new entry, instead of modifying existing
entries. As covered in SUB.RELS, the CWE team will consider creating a
new parent of this submission that would be a child of CWE-200.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED.]


------

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: In answering a question about how the weakness could be
mitigated, the submitter effectively provided a demonstrative example
(see RESOLVED ISSUES). We will revisit this as an example once the
submittion reaches Stage 2 (Detailed Submission).

Response: [NO RESPONSE NEEDED; THIS WAS RESOLVED IN STAGE 2 PHASE 7
(DET-REQUESTED) BY CONVERTING THE SUBMITTER'S ANSWER TO A
DEMONSTRATIVE EXAMPLE AS PART OF THE DETAILED SUBMISSION.]




TIMELINE:

Received: 2022-08-15

Ack-Receipt: 2022-08-16

Init-Review: 2022-10-26

Init-Consultation: 2022-12-21

Init-Declined: YYYY-MM-DD

Init-Accepted: 2025-01-23

Det-Requested: 2025-02-03

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-08-16 sent email
2023-01-06 sent email
2023-02-13 received email
2023-09-12 publish server
2024-05-10 received email
2024-05-10 sent email
2024-07-12 received message
2024-07-12 sent message
2024-08-02 received message
2024-08-29 sent email
2024-09-12 received email
2024-12-06 received email
2024-12-06 sent email
2024-12-17 action update
2025-01-22 action meeting
2025-01-23 sent email
2025-02-03 sent email
