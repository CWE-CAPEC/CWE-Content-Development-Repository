SUBMISSION COMMUNICATION ID: ES2208-26ac7ee6

ALTERNATE ID: HCWE110

ACTION TYPE: New Entry

SUBMISSION STATUS: Internal-Update

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2022-08-15 21:12:21

ISSUES: yes/active

ISSUE DETAILS: SUB.MISC

FIELDCHANGE: MITIGATION, DEMOX, INTROMODES, DETECTION

PUBTRACKER: #17

MTRACKER: #624

GITHUBUSER: anmeza

SUBMISSION TYPE: Hardware

NAME: Driving Intermediate Cryptographic State/Results to Hardware Module Outputs

DESCRIPTION:

The product uses a hardware module implementing a cryptographic
algorithm that writes sensitive information about the intermediate
state or results of its cryptographic operations via one of its output
wires (typically the output port containing the final result).


MODES OF INTRODUCTION:

Phase: Architecture and Design

Note: <<put the information here>>


Phase: Implementation

Note: This can occur when intermediate cryptographic states are
directly assigned to output wires or ports.


==============================================================================================

APPLICABLE PLATFORMS:

Language Class: Not Language-Specific
Prevalence: <<PREVALENCE1>>

Operating System Class: Not OS-Specific
Prevalence: <<PREVALENCE1>>

Architecture Class: Not Architecture-Specific
Prevalence: <<PREVALENCE1>>


Technology Class: System on Chip
Prevalence: <<PREVALENCE1>>


==============================================================================================

COMMON CONSEQUENCES:

Scope: Confidentiality

Impact: Read Memory; Read Application Data

Likelihood: Unknown

Note: Mathematically sound cryptographic algorithms rely on their
correct implementation for security. These assumptions break when a
hardware crypto module leaks intermediate encryption states or results
such that they can be observed by an adversary. If intermediate state
is observed, it might be possible for an attacker to identify the
secrets used in the cryptographic operation.


==============================================================================================

DEMONSTRATIVE EXAMPLES:


INTRO TEXT:

The following SystemVerilog code is a crypto module that takes input
data and encrypts it by processing the data through multiple
encryption rounds. Note: this example is derived from [REF-XXX].



BAD CODE:
LANGUAGE: SystemVerilog

//////////////////////////////////////////////////////////////
// START: Example of module with weakness                   //
//////////////////////////////////////////////////////////////
01 | module crypto_core_with_leakage
02 | (
03 |     input  clk,
04 |     input  rst,
05 |     input  [127:0] data_i,
06 |     output [127:0] data_o,
07 |     output valid
08 | );
09 |
10 | localparam int total_rounds = 10;
11 | logic [3:0]   round_id_q;
12 | logic [127:0] data_state_q, data_state_d;
13 | logic [127:0] key_state_q, key_state_d;
14 |
15 | crypto_algo_round u_algo_round (
16 |     .clk     (clk),
17 |     .rst     (rst),
18 |     .round_i (round_id_q  ),
19 |     .key_i   (key_state_q ),
20 |     .data_i  (data_state_q),
21 |     .key_o   (key_state_d ),
22 |     .data_o  (data_state_d)
23 | );
24 |
25 | always @(posedge clk) begin
26 |     if (rst) begin
27 |         data_state_q <= 0;
28 |         key_state_q  <= 0;
29 |         round_id_q   <= 0;
30 |     end
31 |     else begin
32 |         case (round_id_q)
33 |             total_rounds: begin
34 |                 data_state_q <= 0;
35 |                 key_state_q  <= 0;
36 |                 round_id_q   <= 0;
37 |             end
38 |
39 |             default: begin
40 |                 data_state_q <= data_state_d;
41 |                 key_state_q  <= key_state_d;
42 |                 round_id_q   <= round_id_q + 1;
43 |             end
44 |         endcase
45 |     end
46 | end
47 |
48 | assign valid  = (round_id_q == total_rounds) ? 1'b1 : 1'b0;
49 |
50 | assign data_o = data_state_q;
51 |
52 | endmodule
//////////////////////////////////////////////////////////////
// END  : Example of module with weakness                   //
//////////////////////////////////////////////////////////////


EXPLANATORY TEXT:

In line 50 above, data_state_q is assigned to data_o. Since data_state_q
contains intermediate state/results, this allows an attacker to obtain
these results through data_o.

In line 50 of the fixed logic below,
while "data_state_q" does not contain the final result, 
a "sanitizing" mechanism drives a safe default value (i.e., 0) to
"data_o" instead of the value of "data_state_q".
In doing so, the mechanism prevents
the exposure of intermediate state/results which could be used to
break soundness of the cryptographic operation being performed. A
real-world example of this weakness and mitigation can be seen in a
pull request that was submitted to the OpenTitan Github repository
[REF-XXX].


GOOD CODE:
LANGUAGE: SystemVerilog

//////////////////////////////////////////////////////////////
// START: Example of module without weakness                //
//////////////////////////////////////////////////////////////
01 | module crypto_core_without_leakage
02 | (
03 |     input  clk,
04 |     input  rst,
05 |     input  [127:0] data_i,
06 |     output [127:0] data_o,
07 |     output valid
08 | );
09 |
10 | localparam int total_rounds = 10;
11 | logic [3:0]   round_id_q;
12 | logic [127:0] data_state_q, data_state_d;
13 | logic [127:0] key_state_q, key_state_d;
14 |
15 | crypto_algo_round u_algo_round (
16 |     .clk     (clk),
17 |     .rst     (rst),
18 |     .round_i (round_id_q  ),
19 |     .key_i   (key_state_q ),
20 |     .data_i  (data_state_q),
21 |     .key_o   (key_state_d ),
22 |     .data_o  (data_state_d)
23 | );
24 |
25 | always @(posedge clk) begin
26 |     if (rst) begin
27 |         data_state_q <= 0;
28 |         key_state_q  <= 0;
29 |         round_id_q   <= 0;
30 |     end
31 |     else begin
32 |         case (round_id_q)
33 |             total_rounds: begin
34 |                 data_state_q <= 0;
35 |                 key_state_q  <= 0;
36 |                 round_id_q   <= 0;
37 |             end
38 |
39 |             default: begin
40 |                 data_state_q <= data_state_d;
41 |                 key_state_q  <= key_state_d;
42 |                 round_id_q   <= round_id_q + 1;
43 |             end
44 |         endcase
45 |     end
46 | end
47 |
48 | assign valid  = (round_id_q == total_rounds) ? 1'b1 : 1'b0;
49 |
50 | assign data_o = (valid) ? data_state_q : 0;
51 |
52 | endmodule
//////////////////////////////////////////////////////////////
// END  : Example of module without weakness                //
//////////////////////////////////////////////////////////////



==============================================================================================

OBSERVED EXAMPLES:

# Where known, the submission should identify multiple
# publicly-reported vulnerabilities in real-world products that
# exhibit the weakness. If possible, include CVE Identifier, its
# corresponding weblink, and a short summary. If a CVE ID is
# unavailable, use the Link to point to the reference that explains
# the vulnerability.

# The ID should be the CVE Identifier, if available. If not available,
# then supply a title or alternate ID used by the reference.

# The Link should be the URL to the reference that explains the
# weakness that leads to the vulnerability.

# The ObexSummary should be a brief sentence or two that focuses solely on
# the weakness in the affected product.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#obex

ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: <<SUM1>>


ID: <<CVE2>>

Link: <<LINK2>>

ObexSummary: <<SUM2>>


ID: <<CVE3>>

Link: <<LINK3>>

ObexSummary: <<SUM3>>


ID: <<CVE4>>

Link: <<LINK4>>

ObexSummary: <<SUM4>>



==============================================================================================

DETECTION METHODS:

# Detection Methods should identify commonly-used methods of finding
# the weakness within the product's code, design, etc. This is NOT
# intended for detecting how the weakness is exploited in a
# vulnerability. There can be one or more methods provided.

# Values for Method: Automated Analysis, Automated Dynamic Analysis,
#    Automated Static Analysis, Automated Static Analysis - Source
#    Code, Automated Static Analysis - Binary or Bytecode, Fuzzing,
#    Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis,
#    Manual Static Analysis - Source Code, Manual Static Analysis -
#    Binary or Bytecode, White Box, Black Box, Architecture or Design
#    Review, Dynamic Analysis with Manual Results Interpretation,
#    Dynamic Analysis with Automated Results Interpretation, Formal
#    Verification, Simulation / Emulation, Other

# Values for Effectiveness: High, Moderate, Opportunistic, Limited, None


Method: Automated Static Analysis - Source Code

Desc: Automated static analysis can find some instances of this
weakness by analyzing source register-transfer level (RTL) code
without having to simulate it or analyze it with a formal verification
engine. Typically, this is done by building a model of data flow and
control flow, then searching for potentially-vulnerable patterns that
connect "sources" (signals with intermediate cryptographic
state/results) with "sinks" (hardware module outputs and other signals
outside of trusted cryptographic zone) without any control flow.

Effectiveness: High

Notes: Static code analysis can sometimes lead to false positives.



Method: Simulation / Emulation

Desc: Simulation/emulation based analysis can find some instances of
this weakness by simulating source register-transfer level (RTL) code
along with a set of assertions that incorporate the simulated values
of relevant design signals. Typically, these assertions will capture
desired or undesired behavior. Analysis can be improved by using
simulation-based information flow tracking (IFT) to more precisely
detect unexpected results.

Effectiveness: High

Notes: Simulation/emulation based analysis can sometimes lead to false
negatives if the testbench does not drive the design to a design state
in which the assertion would fail.




Method: Formal Verification

Desc: Formal verification can find some instances of this weakness by
exhaustively analyzing whether a given assertion holds true for a
given hardware design specified in register-transfer level (RTL)
code. Typically, these assertions will capture desired or undesired
behavior. For this weakness, an assertion should check for undesired
behavior in which one output is a signal that captures when a
cryptographic algorithm has completely finished; another output is a
signal with intermediate cryptographic state/results; and there is an
assignment to a hardware module output or other signal outside of a
trusted cryptographic zone.

Alternatively, when using a formal IFT verification, the same
undesired behavior can be detected by checking if computation results
can ever leak to an output when the cryptographic result is not
copmlete.

Effectiveness: High

Notes: Formal verification may not scale for RTL designs with a large state space.


Method: Manual Analysis

Desc: Manual analysis can find some instances of this weakness by
manually reviewing relevant lines of source register-transfer level
(RTL) code to detect potentially-vulnerable patterns. Typically, the
reviewer will trace the sequence of assignments that connect "sources"
(signals with intermediate cryptographic state/results) with "sinks"
(hardware module outputs and other signals outside of trusted
cryptographic zone). If this sequence of assignments is missing
adequate control flow, then the weakness is likely to exist.


Effectiveness: Opportunistic


Notes: Manual analysis of source code is prone to errors (false
positives and false negatives) and highly opportunistic.




==============================================================================================

POTENTIAL MITIGATIONS:


Phase: <<put the information here>>

Description: <<put the information here>>

Effectiveness: <<put the information here>>

Effectiveness Notes: <<put the information here>>



Phase: <<put the information here>>

Description: <<put the information here>>

Effectiveness: <<put the information here>>

Effectiveness Notes: <<put the information here>>



==============================================================================================

RELATED WEAKNESSES:

RelType: ChildOf
ID: CWE-200
View-ID: 1000

RelType: PeerOf
ID: CWE-497
View-ID: 1000

RelType: MemberOf
ID: CWE-1205
View-ID: 1194


REFERENCES:

Title: Security Verification of the OpenTitan Hardware Root of Trust

URL: https://ieeexplore.ieee.org/document/10106105

Author: Andres Meza, Francesco Restuccia, Jason Oberg, Dominic Rizzo, and Ryan Kastner

Date: 2023-04-20

----

Title: Security Verification of an Open Source Hardware Root of Trust

URL: https://cycuity.com/type/blog/security-verification-of-an-open-source-hardware-root-of-trust/

Author: Jason Oberg

Date: 2022-08-03


----

Title: Complete reverse-engineering of AES-like block ciphers by SCARE and FIRE attacks

URL: https://doi.org/10.1007/s12095-014-0112-7

Author: Christophe Clavier, Quentin Isorez, Damien Marion, Antoine Wurcker

Date: 2014-10-23

----

Title: Practical Reverse Engineering of Secret Sboxes by Side-Channel Analysis

URL: https://doi.org/10.1109/ISCAS45731.2020.9180848

Author: Dirmanto Jap, Shivam Bhasin

Date: October, 2020

----

Title: [REF-XXX] [otp_ctrl] Prevent broadcast of scrambler's input/intermediate values #13043

URL: https://github.com/lowRISC/opentitan/pull/13043

Author: Andres Meza

Date: 2022-06-03




ACTIVE ISSUES:

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: The submission has been changed based on the last response
of 2025-03-13, but some elements (fields) from the detailed submission
need to be completed before CWE can be updated. Please address the
following issues:

MUST ADDRESS FOR PUBLICATION - these issues must be answered and
addressed before the detailed submission can be accepted and
integrated into CWE.

1) POTENTIAL MITIGATIONS - the submitted mitigations were already
   covered in detection methods. Currently, CWE distinguishes between
   how weaknesses can be found ("detection methods") versus how they
   can be fixed ("potential mitigations"). Please provide suggestions
   for how developers/designers can eliminate or mitigate the
   weakness, regardless of the methods by which the weakness was
   discovered.

QUALITY IMPROVEMENTS - these issues reflect quality expectations for
CWE updates circa 2022 and later, and they should be addressed;
however, in the interest of balancing timeliness with quality, the
submission can still be published without such changes.

2) MODES OF INTRODUCTION - we created a Note for Implementation. Please
   review it and see if you agree, or suggest changes.

3) MODES OF INTRODUCTION - we could not immediately think of a Note to
   use for Architecture and Design. Is it possible that some insecure
   designs could require or indirectly force the use of output
   channels for intermediate results? Please suggest a Note to use, or
   we could remove this phase.

4) DEMOX - we changed the "INTRO TEXT" to follow CWE style. Please let
   us know if you agree, or suggest changes.

5) DETECTION METHODS - some submitted text was specific to the
   demonstrative example, but we want to cover general detection
   methods, so we removed some demox-specific text. Please let us know
   if you agree, or suggest changes.


Response:


1) I’ve updated the POTENTIAL MITIGATIONS to better emphasize how developers/designers
   can eliminate or mitigate the weakness rather than simply detecting it.


2) I agree with the note. No issues/comments.


3) I’ve removed the architecture & design phase due to the following
   reasons. I think this might warrant a larger discussion.

   During my presentation of this weakness at the HW CWE SIG meeting
   (3/14), this architecture/design choice was briefly mentioned by
   one of the other attendees.  There are legitimate reasons to use
   intermediate state/results for performing some type of integrity
   check operation or other cryptographic/randomness operation.
   However, I believe these use cases represent a “special case”
   because the modules that utilize these intermediate state/results
   typically have the same trust level or security privileges as the
   crypto module generating the results. Being part of the same
   trusted/secure class of modules (or logic blocks) makes the sharing
   of these results a design choice rather than a weakness. The
   weakness we were intending to address with this submission was the
   common mistake of driving intermediate state/results to
   signals/modules that (A) should not be receiving these data (no
   functional necessity) and/or (B) have a lower level of
   trust/security.

   If a design needs to use intermediate state/results then designers
   should ensure that these data are only driven to the intended
   modules or logic blocks. Whether or not this will lead to the
   weakness we are describing is highly dependent on the
   implementation and organization of the logic. For instance, all of
   the logic that operates on intermediate state/results for integrity
   checks (or some other purpose) could be a submodule of the crypto
   module. This would pose no issue. However, if this logic is placed
   outside of the crypto module, then the control flow logic we
   discuss in the potential mitigations needs to be placed outside of
   the crypto module rather than inside (as shown in the demo
   code). The way we have described the weakness (i.e., speaking in
   terms of module outputs) is an extremely common design pattern but
   it would not directly map onto the implementation in the previous
   sentence. I’ve tried to account for this by also describing the
   weakness in terms of sources and sinks rather than just outputs.

4) I agree with the updates. No issues/comments.

5) I agree with the updates. No issues/comments.



RESOLVED ISSUES:

SCOPE.NOMITS - "No actionable mitigations"

Description: There are no actionable mitigations available to the
developer/designer/manufacturer to prevent or reduce the weakness.

Resolution: Submissions will be reviewed on a case-by-case basis, delayed,
and possibly cited as examples until this exclusion is finalized after
extensive community feedback.

Comments: What would be the mitigation for the issue?

Response:

A hardware module implementing a cryptographic algorithm should
contain mitigations that write a default value, such as all 0s, while
encryption is being conducted. This prevents intermediate
cryptographic state from reaching the output.

[EDITED RESPONSE. A demonstrative example was provided and has been
moved to that section.]

------

SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: An initial submission (or full submission) cannot progress past
the consultation phase until SUB.UNCLEAR is addressed.

Comments:

(1) In the submitter's most recent response to this issue, it appears
that the key weakness is that "designers do not insert
logic/mechanisms [that prevent] sensitive information (i.e.,
intermediate state/results, input values, keys) from being driven to
any outputs." The exposure of this information can occur "since
hardware designs must continuously drive values to their outputs
(wires) (which can be sampled/accessed at any point in time)." Meeting
discussion on 2025-01-22 settled on this description: "A hardware
module implementing a cryptographic algorithm writes sensitive
information about the intermediate state or results of its
cryptographic operations via one of its output wires (typically the
output port) containing the final result."

The name was also discussed on 2025-01-22 and will be changed to:
"Driving Intermediate Cryptographic State/Results to Hardware Module
Outputs".

(2) Based on the previous round of responses by the submitter, we
believe that there are software parallels (to be discussed in the
SUB.RELS issue), but we agree that this submission is appropriate as a
hardware-specific consideration of the problem.

Response: [RESOLVED ISSUE; DO NOT CHANGE]

------

SUB.ACTION - "Unable to determine action"

Description: It is not clear what action to perform based on the
submission, e.g., create new entry, update existing entry, etc.

Resolution: The submission cannot progress to the Internal-Update stage
until the relevant actions(s) are identified.

Comments: In earlier rounds during initial consultation, it was
unclear whether a new entry could be created from this submission, or
if modifications to existing entries were needed. However, the
2025-01-22 meeting resolved the question - this submission should be
treated as a new entry, at the variant level of abstraction.

Response: [RESOLVED ISSUE; DO NOT CHANGE]


------

SUB.ABS.LOWLEVEL - "Low level of abstraction"

Description: Submission identifies an issue, but its abstraction might
be too low-level to merit its own CWE entry. If it is focused on a
particular technology, framework, protocol, or function, then it might
not be unique enough to get its own CWE ID.  This might lead to
modification of an existing entry to include the additional details,
or creation of a higher-level entry for which the submission is one
example. (Note: some older CWE entries have this problem and would not
be published today, generally because they were too specific to a
particular language.)

Resolution: the submission will be allowed to progress to later phases
once the more-general concept is appropriately identified and
described. The original, lower-level submission will serve as a
primary example of the more general concept.

Comments:

(1) In the last round, we asked "Is the weakness or mistake specific
to a particular technology?"  The submitter's reply stated that "The
weakness is not specific to a particular technology and could
reasonably arise in various types of designs (e.g. processor hardware,
SoCs, crypto IP, Bus/Interfaces, etc.) which derive result data from
sensitive information and continuously drive (or stream) those result
data from a secure/trusted location to a potentially
unsecure/untrusted location." Since this applies to a variety of
hardware technologies, we agree that this submission is not too
specific.

(2) We also stated that "'cryptographic state' is a very specific type
of information, which is likely too low-level to receive its own
entry." The submitter replied that "this weakness is especially
impactful for cryptographic accelerators such as AES, HMAC, ECC, and
others." However, the 2025-01-22 meeting led to the conclusion that
retaining this submission at a variant level of abstraction is
appropriate, and that this particular issue is important and common
enough to warrant a new entry, instead of modifying existing
entries. As covered in SUB.RELS, the CWE team will consider creating a
new parent of this submission that would be a child of CWE-200.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED.]


------

SUB.MISC - "Miscellaneous/other problem"

Description: The submission has some other problem that is not covered
elsewhere.

Resolution: This will depend on the nature of the problem.

Comments: In answering a question about how the weakness could be
mitigated, the submitter effectively provided a demonstrative example
(see RESOLVED ISSUES). We will revisit this as an example once the
submittion reaches Stage 2 (Detailed Submission).

Response: [NO RESPONSE NEEDED; THIS WAS RESOLVED IN STAGE 2 PHASE 7
(DET-REQUESTED) BY CONVERTING THE SUBMITTER'S ANSWER TO A
DEMONSTRATIVE EXAMPLE AS PART OF THE DETAILED SUBMISSION.]

----

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: The RELATED WEAKNESSES section has been updated based on
previous discussions and further analysis during Stage 2.

In summary, CWE-497 may have been appropriate as a parent, but its
current extended description is software-focused, and the "system"
term is intended to refer to the operating system. It might be too
significant to change CWE-497 to be more generally applicable to
hardware. There is a possibility of creating a more-specific
"intermediate" CWE entry between CWE-200 and this submission, roughly
for "sending sensitive data to a destination accessible by untrusted
parties," which could include a a SoC with various modules in which a
control sphere is defined that allows modules to read information from
some modules but not others. The CWE team will investigate this
possibility separately; creation of an intermediate entry, even if it
is determined to be appropriate, will not happen before this
submission can be included in CWE. Therefore, for now, CWE-200 will be
used as the partny. While it is very general, as of CWE 4.16, there
are no clear children under which this submission could fit.

Response: [NO RESPONSE NEEDED; ISSUE RESOLVED FOR THIS
SUBMISSION. CWE-497 IS TOO SOFTWARE-FOCUSED TO CHANGE, SO CWE-497 WILL
BE LISTED AS A PEER.]





TIMELINE:

Received: 2022-08-15

Ack-Receipt: 2022-08-16

Init-Review: 2022-08-16

Init-Consultation: 2022-12-21

Init-Declined: YYYY-MM-DD

Init-Accepted: 2025-01-23

Det-Requested: 2025-02-03

Det-Received: 2025-03-13

Det-Review: 2025-03-27

Det-Consultation: 2025-03-27

Det-Accepted: 2025-04-02

Internal-Update: 2025-04-02

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-08-16 sent email
2022-08-16 action review
2023-01-06 sent email
2023-02-13 received email
2023-09-12 publish server
2024-05-10 received email
2024-05-10 sent email
2024-07-12 received message
2024-07-12 sent message
2024-08-02 received message
2024-08-29 sent email
2024-09-12 received email
2024-12-06 received email
2024-12-06 sent email
2024-12-17 action update
2025-01-22 action meeting
2025-01-23 sent email
2025-02-03 sent email
2025-02-20 sent email
2025-02-20 received email
2025-03-06 received email
2025-03-06 sent email
2025-03-06 sent email
2025-03-13 received email
2025-03-14 action meeting
2025-03-28 sent email
2025-04-02 sent email
2025-04-02 received email
