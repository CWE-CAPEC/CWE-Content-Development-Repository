SUBMISSION COMMUNICATION ID: ES2208-9fb81a1a

ALTERNATE ID: HCWE111

ACTION TYPE: New Entry

AFFECTED CWES:

SUBMISSION STATUS: Det-Requested

ORIGIN: sub-server

SUBMISSION DATE: 2022-08-25 15:18:55

ISSUES: yes/active

ISSUE DETAILS: SUB.UNCLEAR, SUB.RELS

PUBTRACKER: #13

MTRACKER: #632

GITHUBUSER: frestucc

SUBMISSION TYPE: Hardware

NAME: Improper Request Propagation before Data Reception in Write Transactions in a Bus Architecture

SUMMARY:

The product uses a multi-manager shared bus architecture with an
on-chip interconnect that speculatively propagates a request for a
write transaction, but it does not ensure that the remaining steps
required by the manager to complete the request are fulfilled in a
timely manner.

EXTENDED DESCRIPTION:

(ADDITIONAL DESCRIPTION FOLLOWS; this needs to be corrected and
refined in later phases after completion of the Initial-Consultation
phase.)

Some products may use an architecture with a shared bus that is
accessible by multiple devices, in which these devices can issue
requests that utilize the shared bus. There may be an on-chip
interconnect based on a protocol that manages the devices' requests to
the bus and enforces the ordering of requests and data. When a device
makes a request, the bus might indefinitely lock the write access to a
shared output link until the initiating device finishes its
transaction. If the initiating device does not finish the transaction
quickly enough, this can prevent other devices from using the bus,
causing a denial of service.

The scenario may play out as follows. The interconnect receives a
write request from a controller initiator (e.g., sending the header to
the interconnect for writing N words of data, with N ranging from 1 to
the maximum burst length allowed). The interconnect then speculatively
propagates the request to the target peripheral through the shared bus
before the corresponding data are received at the interconnect.  This
speculatively reserves the bus to the manager transaction issuer,
which is left free to delay its data provisioning phase.    This reserves
the whole bus path between the initiator and the target peripheral
until all of the words associated with the request are provided by the
controller.

Here, the word "speculatively" refers to the fact that the
interconnect propagates the request assuming that the controller will
at some point provide the data, thus releasing the use of the bus. The
interconnect assumes a cooperative behavior from the controller, thus
implicitly trusting that the controller will complete the transaction
and release the bus for the use from the other controllers.

A malicious, faulty, or misbehaving manager module can generate a
denial-of-service condition in preventing access to the write data
link from all of the other managers in the system, and unboundedly
inhibit the write access to one or multiple peripherals in the system
(i.e., memories, I/Os, etc.).

A full description and investigation of the issue for one of the most
popular standards for on-chip communication deployed in modern systems on a
chip is reported in [REF-XXX] and [REF-YYY].

MODES OF INTRODUCTION:

# This provides information about how and when a given weakness may be
# introduced. Information should list the Phase of the development life
# cycle in which the weakness can introduced. A descriptive Note is
# optional but preferred.
# 
# If the weakness can be introduced in multiple phases, include separate
# items for each Phase. Copy and paste as needed.
# 

# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#introduction


Phase: <<PHASE1>>

Note: <<put the information here>>


Phase: <<PHASE2>>

Note: <<put the information here>>


************************************************************************************************

APPLICABLE PLATFORMS:

# This element specifies the programming languages, operating systems,
# architectures, and technologies in which this weakness is usually
# found. If an element does not apply to this submission, you can use
# the "Not X-Specific" where "X" is the type of element.

# If there are multiple languages, OSes, architectures, and/or
# technologies, then list each one separately.
# 
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#platforms


# Values for Prevalence: Often, Sometimes, Rarely, Undetermined

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other

Language Name: <<LANGUAGE1>>
Prevalence: <<PREVALENCE1>>


Language Name: <<LANGUAGE2>>
Prevalence: <<PREVALENCE2>>


Language Name: <<LANGUAGE3>>
Prevalence: <<PREVALENCE3>>


# Values for Language Class: Assembly, Compiled, Hardware Description
#    Language, Interpreted, Not Language-Specific

Language Class: <<LANGCLASS1>>
Prevalence: <<PREVALENCE1>>

Language Class: <<LANGCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Name: AIX, Android, BlackBerry OS,
#    Chrome OS, Darwin, FreeBSD, iOS, macOS, NetBSD, OpenBSD, Red Hat,
#    Solaris, SUSE, tvOS, Ubuntu, watchOS, Windows 9x, Windows
#    Embedded, Windows NT

Operating System Name: <<OS1>>
Prevalence: <<PREVALENCE1>>

Operating System Name: <<OS2>>
Prevalence: <<PREVALENCE2>>


# Values for Operating System Class: Linux, macOS, Unix, Windows,
#    Not OS-Specific


Operating System Class: <<OSCLASS1>>
Prevalence: <<PREVALENCE1>>

Operating System Class: <<OSCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Architecture Name: Alpha, ARM, Itanium, Power
#     Architecture, SPARC, x86, Other


Architecture Name: <<ARCH1>>
Prevalence: <<PREVALENCE1>>

Architecture Name: <<ARCH2>>
Prevalence: <<PREVALENCE2>>

Architecture Name: <<ARCH3>>
Prevalence: <<PREVALENCE3>>


# Values for Architecture Class: Embedded, Microcomputer, Workstation,
#     Not Architecture-Specific

Architecture Class: <<ARCHCLASS1>>
Prevalence: <<PREVALENCE1>>

Architecture Class: <<ARCHCLASS2>>
Prevalence: <<PREVALENCE2>>


# Values for Technology Name: Web Server, Database Server, Accelerator
#    Hardware, Analog and Mixed Signal Hardware, Audio/Video Hardware,
#    Bus/Interface Hardware, Clock/Counter Hardware, Communication
#    Hardware, Controller Hardware, Memory Hardware, Microcontroller
#    Hardware, Network on Chip Hardware, Power Management Hardware,
#    Processor Hardware, Security Hardware, Sensor Hardware, Storage
#    Hardware, Test/Debug Hardware


Technology Name: <<TECH1>>
Prevalence: <<PREVALENCE1>>

Technology Name: <<TECH2>>
Prevalence: <<PREVALENCE2>>

Technology Name: <<TECH3>>
Prevalence: <<PREVALENCE3>>


# Values for Technology Class: Client Server, Cloud Computing, ICS/OT,
#     Mainframe, Mobile, N-Tier, SOA, System on Chip, Web Based, Not
#     Technology-Specific
	
Technology Class: <<TECHCLASS1>>
Prevalence: <<PREVALENCE1>>

Technology Class: <<TECHCLASS2>>
Prevalence: <<PREVALENCE2>>


************************************************************************************************

COMMON CONSEQUENCES:

# This element will cover the typical negative security impact (or
# impacts) that occurs if this weakness can be exploited by an
# attacker. Each Consequence must include a Scope and Impact. Both the
# Likelihood and Note elements are optional.
#
# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#conseq



# Values for Scope: Confidentiality, Integrity, Availability, Access
#    Control, Accountability, Authentication, Authorization,
#    Non-Repudiation, Other


# Values for Impact: Modify Memory, Read Memory, Modify Files or
#    Directories, Read Files or Directories, Modify Application Data,
#    Read Application Data, DoS: Crash, Exit, or Restart, DoS:
#    Amplification, DoS: Instability, DoS: Resource Consumption (CPU),
#    DoS: Resource Consumption (Memory), DoS: Resource Consumption
#    (Other), Execute Unauthorized Code or Commands, Gain Privileges
#    or Assume Identity, Bypass Protection Mechanism, Hide Activities,
#    Alter Execution Logic, Quality Degradation, Unexpected State,
#    Varies by Context, Reduce Maintainability, Reduce Performance,
#    Reduce Reliability, Other


# Values for Likelihood: High, Medium, Low, Unknown


Scope: <<SCOPE1>>

Impact: <<IMPACT1a>>; <<IMPACT1b>>; <<IMPACT1c>>

Likelihood: <<LIKELIHOOD1>>

Note: <<put the information here>>




Scope: <<SCOPE2>>

Impact: <<IMPACT2a>>; <<IMPACT2b>>; <<IMPACT2c>>

Likelihood: <<LIKELIHOOD2>>

Note: <<put the information here>>




Scope: <<SCOPE3>>

Impact: <<IMPACT3a>>; <<IMPACT3b>>; <<IMPACT3c>>

Likelihood: <<LIKELIHOOD3>>

Note: <<put the information here>>



************************************************************************************************

# 8. DEMONSTRATIVE EXAMPLES (required)

DEMONSTRATIVE EXAMPLES:

# The entry should have one or more demonstrative examples, but
# submitters should not put significant effort into these until the CWE
# team has reviewed and accepted the general concepts behind the
# submission. Submissions can include example information for either
# Software, Hardware, or both, as relevant.

# "BAD CODE" and "GOOD CODE" can be code snippets, descriptions of a
# design or architecture, or an algorithm or protocol.
#
# * If you would like to submit diagrams/images to support any
# weakness descriptive examples, please attach it to the email
# submission in a png format and reference it by filename where
# desired. For an example, please see:
# https://cwe.mitre.org/data/definitions/1256.html

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#demox

# Values for Language Name: Ada, ARM Assembly, ASP, ASP.NET, Basic, C,
#    C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON,
#    JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby,
#    Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86
#    Assembly, Other


INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


---------------

INTRO TEXT:

<<put the information here>>

BAD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>


EXPLANATORY TEXT:

<<put the information here>>

GOOD CODE:
LANGUAGE: <<LANGUAGE>>

<<put the information here>>



************************************************************************************************

OBSERVED EXAMPLES:

# Where known, the submission should identify multiple
# publicly-reported vulnerabilities in real-world products that
# exhibit the weakness. If possible, include CVE Identifier, its
# corresponding weblink, and a short summary. If a CVE ID is
# unavailable, use the Link to point to the reference that explains
# the vulnerability.

# The ID should be the CVE Identifier, if available. If not available,
# then supply a title or alternate ID used by the reference.

# The Link should be the URL to the reference that explains the
# weakness that leads to the vulnerability.

# The ObexSummary should be a brief sentence or two that focuses solely on
# the weakness in the affected product.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#obex

ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: <<SUM1>>


ID: <<CVE2>>

Link: <<LINK2>>

ObexSummary: <<SUM2>>


ID: <<CVE3>>

Link: <<LINK3>>

ObexSummary: <<SUM3>>


ID: <<CVE4>>

Link: <<LINK4>>

ObexSummary: <<SUM4>>



************************************************************************************************

DETECTION METHODS:

# Detection Methods should identify commonly-used methods of finding
# the weakness within the product's code, design, etc. This is NOT
# intended for detecting how the weakness is exploited in a
# vulnerability. There can be one or more methods provided.

# Values for Method: Automated Analysis, Automated Dynamic Analysis,
#    Automated Static Analysis, Automated Static Analysis - Source
#    Code, Automated Static Analysis - Binary or Bytecode, Fuzzing,
#    Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis,
#    Manual Static Analysis - Source Code, Manual Static Analysis -
#    Binary or Bytecode, White Box, Black Box, Architecture or Design
#    Review, Dynamic Analysis with Manual Results Interpretation,
#    Dynamic Analysis with Automated Results Interpretation, Formal
#    Verification, Simulation / Emulation, Other

# Values for Effectiveness: High, Moderate, Opportunistic, Limited, None

Method: <<METHOD1>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS1>>

Notes: <<put the information here>>


Method: <<METHOD2>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS2>>

Notes: <<put the information here>>


Method: <<METHOD3>>

Desc: <<put the information here>>

Effectiveness: <<EFFECTIVENESS3>>

Notes: <<put the information here>>



************************************************************************************************

POTENTIAL MITIGATIONS:

# This element should cover one or more techniques that will eliminate
# and/or reduce the frequency or impact of the weakness. Each mitigation
# must include a Phase and Description, while the Effectiveness element
# is optional. A descriptive Effectiveness Note is also optional.

# See details at:
# https://cwe.mitre.org/community/submissions/guidelines.html#mitigations


# Values for Phase: Policy, Requirements, Architecture and Design,
#    Implementation, Build and Compilation, Testing, Documentation,
#    Bundling, Distribution, Installation, System Configuration,
#    Operation, Patching and Maintenance, Porting, Integration,
#    Manufacturing, Decommissioning and End-of-Life

# Values for Effectiveness: High, Moderate, Limited, Incidental,
#    Discouraged Common Practice, Defense in Depth, None


Phase: <<PHASE1>>

Description: <<put the information here>>

Effectiveness: <<EFFECT1>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE2>>

Description: <<put the information here>>

Effectiveness: <<EFFECT2>>

Effectiveness Notes: <<put the information here>>


Phase: <<PHASE3>>

Description: <<put the information here>>

Effectiveness: <<EFFECT3>>

Effectiveness Notes: <<put the information here>>



RELATED WEAKNESSES:

ChildOf CWE-841


REFERENCES:

Title: [REF-XXX] Cut and Forward: Safe and Secure Communication for FPGA System on Chips

URL: https://ieeexplore.ieee.org/document/9852740

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: [REF-YYY] Safely Preventing Unbounded Delays During Bus Transactions in FPGA-based SoC

URL: https://ieeexplore.ieee.org/abstract/document/9114758

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>

Title: <<put the information here>>

URL: <<put the information here>>

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>


Title: <<put the information here>>

URL: <<put the information here>>

Author: <<put the information here>>

Date: <<put the publication date here - either "YYYY-MM-DD", "Monthname, YYYY", or "YYYY">>



ACTIVE ISSUES:
----------

SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: An initial submission (or full submission) cannot progress past
the consultation phase until SUB.UNCLEAR is addressed.

Comments: Based on the submitter's 2025-03-07 response, we have
further updated this submission.  We changed the description to
include the suggested phrase "that the remaining steps required by the
manager to complete the request are fulfilled in a timely manner".

The following tasks will remain in Stage 2:

(1) For Stage 2 discussion, we need to decide whether to use "manager
module" or "controller module" term, and how to best clarify that we
mean "a hardware module capable of initiating transactions on the bus
through its manager interface. Examples of manager modules are
processors, DMAs, hardware accelerators, etc."

(2) For Stage 2 discussion, we will need to account for potential
confusion with "speculative execution" as used with issues like
SPECTRE/MELTDOWN.

(3) For Stage 2 discussion, we will need to ensure that the following
details are appropriately merged into the submission: "the cut-through
switching policy, a switching methodology for high performance
commonly implemented at the interconnect level. In cut-through, a
request is propagated independently on the receipt at the interconnect
level of the corresponding data. As mentioned in the previous comment,
if the controller issuing a write request delays the provisioning of
the corresponding data, the other controllers experience delays in
accessing the bus. Such delays are capable of generating denial of
service."

(4) The CWE Team will separately record your comment on CWE-1059: "I
would like to highlight a subtle distinction: as I understand it,
CWE-1059 primarily addresses cases where documentation is incomplete
or missing. In contrast, the issue in (i) pertains to a specification
that is, either intentionally or unintentionally, underspecified. If
you believe this falls under the category covered by CWE-1059, then I
agree with your determination."


Response: [NO RESPONSE NECESSARY; ISSUE TO BE RESOLVED IN STAGE 2]

----------

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: The 2025-03-07 response agreed with our decision to make
this a child of CWE-841: Improper Enforcement of Behavioral
Workflow. Separately, we will modify CWE-841's description so that it
is more clearly consistent with this submission.  No response is
needed.

Response: [NO RESPONSE NECESSARY; ISSUE TO BE RESOLVED INDEPENDENT OF THIS SUBMISSION]

----------

RESOLVED ISSUES:


SUB.ABS.LOWLEVEL - "Low level of abstraction"

Description: The submission identifies a weakness, but it is a duplicate of
(or partially overlaps) existing weaknesses, indicating problems with the
submission or associated CWE entries.

Description: The submission identifies an issue, but its abstraction might
be too low-level to merit its own CWE entry. If it is focused on a
particular technology, framework, protocol, or function, then it might not
be unique enough to get its own CWE ID.  This might lead to modification of
an existing entry to include the additional details, or creation of a
higher-level entry for which the submission is one example. (Note: some
older CWE entries have this problem and would not be published today,
generally because they were too specific to a particular language.)

Resolution: The submission will be allowed to progress to later phases once
the more-general concept is appropriately identified and described. The
original, lower-level submission will serve as a primary example of the
more general concept.

Comments: The submitter said "the weakness is associated with general
concepts such as cut-through switching and multi-channel bus protocols
rather than only with the specific standard under analysis in the
references." We agree with the general concept and will separately
work to create a more general CWE (and/or update CWE-841: Improper
Enforcement of Behavioral Workflow as needed). This submission's level
of abstraction does not need to be changed, and it can remain
applicable to bus architectures. Please let us know if you agree with
this comment.

Response: I agree.


----------
TIMELINE:

Received: 2022-08-25

Ack-Receipt: 2022-08-29

Init-Review: 2022-09-12

Init-Consultation: 2024-06-25

Init-Declined: YYYY-MM-DD

Init-Accepted: 2025-03-24

Det-Requested: 2025-03-24

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-08-29 sent email
2022-09-12 action review
2023-09-12 publish server
2024-06-25 sent email
2024-06-26 received reply
2025-03-06 sent email
2025-03-07 received comment
2025-03-24 sent email
2025-03-24 sent email
