SUBMISSION COMMUNICATION ID: ES2208-9fb81a1a

ALTERNATE ID: HCWE111

ACTION TYPE: New Entry

AFFECTED CWES:

SUBMISSION STATUS: Det-Received

ORIGIN: sub-server

SUBMISSION DATE: 2022-08-25 15:18:55

ISSUES: yes/active

ISSUE DETAILS: SUB.UNCLEAR, SUB.RELS

PUBTRACKER: #13

MTRACKER: #632

GITHUBUSER: frestucc

SUBMISSION TYPE: Hardware

NAME: Improper Request Propagation before Data Reception in Write Transactions in a Bus Architecture

SUMMARY:

The product uses a multi-manager shared bus architecture with an
on-chip interconnect that speculatively propagates a request for a
write transaction, but it does not ensure that the remaining steps
required by the manager to complete the request are fulfilled in a
timely manner.

EXTENDED DESCRIPTION:

(ADDITIONAL DESCRIPTION FOLLOWS; this needs to be corrected and
refined in later phases after completion of the Initial-Consultation
phase.)

Some products may use an architecture with a shared bus that is
accessible by multiple devices, in which these devices can issue
requests that utilize the shared bus. There may be an on-chip
interconnect based on a protocol that manages the devices' requests to
the bus and enforces the ordering of requests and data. When a device
makes a request, the bus might indefinitely lock the write access to a
shared output link until the initiating device finishes its
transaction. If the initiating device does not finish the transaction
quickly enough, this can prevent other devices from using the bus,
causing a denial of service.

The scenario may play out as follows. The interconnect receives a
write request from a controller initiator (e.g., sending the header to
the interconnect for writing N words of data, with N ranging from 1 to
the maximum burst length allowed). The interconnect then speculatively
propagates the request to the target peripheral through the shared bus
before the corresponding data are received at the interconnect.  This
speculatively reserves the bus to the manager transaction issuer,
which is left free to delay its data provisioning phase.    This reserves
the whole bus path between the initiator and the target peripheral
until all of the words associated with the request are provided by the
controller.

Here, the word "speculatively" refers to the fact that the
interconnect propagates the request assuming that the controller will
at some point provide the data, thus releasing the use of the bus. The
interconnect assumes a cooperative behavior from the controller, thus
implicitly trusting that the controller will complete the transaction
and release the bus for the use from the other controllers.

A malicious, faulty, or misbehaving manager module can generate a
denial-of-service condition in preventing access to the write data
link from all of the other managers in the system, and unboundedly
inhibit the write access to one or multiple peripherals in the system
(i.e., memories, I/Os, etc.).

A full description and investigation of the issue for one of the most
popular standards for on-chip communication deployed in modern systems on a
chip is reported in [REF-XXX] and [REF-YYY].

MODES OF INTRODUCTION:

Phase: Architecture and Design

Note: This occurs if the on-chip communication interconnect is based
on a multi-channel on-chip communication standard assuming cooperative
behavior among the manager modules AND an unsafe switching methodology
(e.g., cut-through) is in use.


************************************************************************************************

APPLICABLE PLATFORMS:

Language Class: Not Language-specific
Prevalence: Undetermined

Operating System Class: Not OS-Specific
Prevalence: Undetermined

Architecture Name: ARM
Prevalence: Undetermined

Architecture Class: Not Architecture-Specific
Prevalence: Undetermined

Technology Name: Bus/Interface Hardware
Prevalence: Undetermined

Technology Name: Communication Hardware
Prevalence: Undetermined

Technology Class: System on Chip
Prevalence: Undetermined


************************************************************************************************

COMMON CONSEQUENCES:

Scope: Availability

Impact: Memory-access delays; Denial-of-Service; I/O access delays, Deadline miss

Likelihood: High

Note: The attacker can leverage this weakness to generate unbounded
delays and Denial-of-Service in the access of shared resources. The
system interconnect might be left in an inconsistent state, requiring
a partial or full reset of the network, according to the
implementation.


************************************************************************************************

DEMONSTRATIVE EXAMPLES:


INTRO TEXT:

Architectural description reported

BAD CODE:

LANGUAGE: Not language-specific

The interconnect designer might use an interconnect using cut-through
switching or using a third-party interconnect not disclosing the type
of implemented switching. Cut-through has been demonstrated to
generate the provided issue in modern on-chip multi-channel
communication standards.

The following figure provides an example on the AMBA AXI full on-chip
communication standard, deployed on an FPGA SoC platform for
demonstration. The architecture is multi-manager. However, for
simplicity, only one generic hardware manager module $HA_i$ is
reported.

[SEE IMAGE ES2208-9fb81a1a-demox-intro.png]


EXPLANATORY TEXT:

The figure reports a schematic representation of the behavior of an
interconnect implementing cut-through switching ($S_i^{I,CT}$) on a
sample AXI write transaction.

(a) $HA_i$ starts the write transaction issuing the address request $A$. In this example, $A$ is a four-word burst request.
(b) $A$ is sampled by $S_i^{I,CT}$ and immediately routed to $M^I$. $HA_i$ starts providing the data words corresponding to $A$. The data words $W = {W_1, ... , W_4^L}$ are consecutively sampled by $S_i^{I,CT}$. The last word of the burst is marked by $HA_i$ as last (L) word, hence named $W_4^L$.
(c) $W$ are routed through the network following the address request $A$, until the last word $W_4^L$ is sampled by the FPGA-PS interface $S_{PS}$.
(d) After a service delay, $S_{PS}$ replies with a write response $B$ to acknowledge $HA_i$ about the completion of the transaction. $B$ is routed to $HA_i$ by $I_{\text{AXI}}$. The write transaction is completed.

In step (b), $S_i^{I,CT}$ propagates $A$ to $M^I$ regardless of the provisioning of the corresponding data words $W$ by $HA_i$.
The propagation of $A$ to $M^I$ books the $M^I$'s write channel to $HA_i$, which should provide the write data $W$ corresponding to $A$.
No timing constraints on $HA_i$ to provide $W$ after $A$ has been propagated to $M^I$ are defined in the AXI standard. Thus, $HA_i$ can arbitrarily delay the provisioning of $W$.
$M^I$ is the shared port among all the hardware managers in the system to access the shared subordinate resource (the memory).
Therefore, once $A$ is propagated to $M^I$ and $HA_i$ does not provide $W$, $M^I$ is stalled and no other hardware managers in the system can access it.
Cut-through $S_i^{I,CT}$ implicitly trusts $HA_i$ that once $A$ is propagated to $M^I$, $HA_i$ will complete the transaction as soon as possible providing $W$ and then leaving the access of $M^I$ to the other hardware managers in the system.

A single malicious/misbehaving manager delaying the provisioning of the data can delay the access to the shared resource from the other hardware managers in the system, endangering the availability of the shared resources, thus generating a DoS for all the other hardware managers in the system.
Since AXI does not provide a methodology to abort a faulty transaction once initiated, if no other recovery mechanisms are provided, a reset of the interconnect network is required.

GOOD CODE:

LANGUAGE: Not language-specific

The designer should prefer to use a switching policy preventing bus stalls to be propagated in the interconnect (like Cut-and-Forward or Store-and-Forward, according to the design tradeoffs [REF-XXX][REF-ZZZ]). Alternatively, the designer can use a monitoring logic capable of detecting dangerous stalls introduced by misbehaving managers and a recovery logic capable of restoring a safe condition of the interconnect [REF-YYY]. Following is a short description of the safe methodologies.

Solution 1: A monitor and recovery logic is placed between the system interconnect and the managers. This logic should be capable of detecting the stall condition and intervene whenever the manager introduces long stalls [REF-YYY].
In such scenarios, the monitor logic can abort the execution of the stalling transaction and solve the stall condition by completing the transaction with dummy data beats to restore a safe condition of the interconnect, thus making the shared bus again available to the other hardware managers in the system.
A monitor and recovery logic does not stop bus stalls to be propagated. Thus a careful analysis of acceptable stall length is required as these stalls will anyway generate delays n accessing shared resources for the other managers in the system  [REF-YYY].

Solution 2: store-and-forward switching is used instead of cut-through. Store-and-forward follow a more conservative approach with respect to cut-through preventing bus stalls to be propagated to the interconnect. When a write request $A$ is issued by $HA_i$, store-and-forward waits to internally buffer all the data words $W$ corresponding to $A$ before booking the shared manager port $M^I$. Thus, the request and the corresponding data are consequently propagated to $M^I$ without any stalls. The following figure describes the behavior of store-and-forward $S_i^{I,\text{S\&F}}$ on a sample write transaction.

[SEE IMAGE ES2208-9fb81a1a-demox-sol2.png]

The description follows:
(a) $HA_i$ issues the address write request $A$. Again, $A$ is a request for a 4-word burst transaction.
(b) $A$ is sampled by $S_i^{I,\text{S\&F}}$ and internally buffered. $S_i^{I,\text{S\&F}}$ waits to receive the corresponding data words $W={W_1, ... , W_4^L}$. $HA_i$ starts providing $W$, one word after the other. $A$ has not been propagated to $M^I$ yet.
(c) $S_i^{I,\text{S\&F}}$ has buffered the 4 words $W$ associated with $A$. $S_i^{I,\text{S\&F}}$ propagates now $A$ to $M^I$, booking $M^I$ for 4 data words.
(d) The data words $W$ are immediately propagated after $A$ by $S_i^{I,\text{S\&F}}$, one word after the other. The propagation of the last word $W_4^L$ completes the data phase related to $A$ and releases $M^I$ to the other HAs.
At last, the FPGA-PS interface replies $HA_i$ with the write response $B$.

In store-and-forward, the shared bus $M^I$ is booked by $S_i^{I,\text{S\&F}}$ only when all the data words corresponding to $A$ have been buffered and are ready to be transmitted.
Any stall in data propagation introduced by $HA_i$, bounded or unbounded, is internally contained by $S_i^{I,\text{S\&F}}$.

Store-and-forward requires higher cost in latency and area consumption that might not be acceptable in all the implementations. A full discussion is reported on [REF-XXX].

Solution 3: cut-and-forward provides a methodology to prevent DoS of shared resources while providing configurability on latency and area impact. The following figure shows the behavior of the cut-and-forward buffer $S_i^{I,\text{C\&F}}$ on an AXI write transaction. The following figure describes the behavior of cut-and-forward $S_i^{I,\text{C\&F}}$ on a sample write transaction. In this example, $S_i^{I,\text{C\&F}}$ is configured with $C=2$. Full details can be found in [REF XXX][REF ZZZ].

[SEE IMAGE ES2208-9fb81a1a-demox-sol3.png]

(a) $HA_i$ issues a four-word burst address write request $A$.
(b) $A$ is internally buffered by $S_i^{I,\text{C\&F}}$.
Subsequently, $HA_i$ starts providing the data words $W = {W_1, \ldots, W_4^L}$ corresponding to $A$.
(c) $S_i^{I,\text{C\&F}}$ has buffered $C=2$ data words associated with $A$ ($W_1$ and $W_2$). $S_i^{I,\text{C\&F}}$ generates a two-word burst subrequest $A_1$ and propagates it to $M^I$. $M^I$ is booked for two data words. $W_1$ and $W_2$ have already been buffered by $S_i^{I,\text{C\&F}}$ and can be propagated immediately after $A_1$. $W_2$ is converted by $S_i^{I,\text{C\&F}}$ into a last data word $W_2^L$. In parallel with the propagation of $W_1$ and $W_2$, $S_i^{I,\text{C\&F}}$ buffers $W_3$ and $W_4^L$.
(d) $W_3$ and $W_4^L$ have been buffered into $S_i^{I,\text{C\&F}}$. $S_i^{I,\text{C\&F}}$ generates a second sub-request $A_2$ for $C=2$ data words. The address of $A_2$ is calculated according to $C$. $A_2$ is propagated to $M^I$. $M^I$ is booked for two data words. $W_3$ and $W_4^L$ are propagated to $M^I$ immediately after $A_2$.
(e) After a service delay, the FPGA-PS interface replies with the two write responses $B_1$ and $B_2$ corresponding to $A_1$ and $A_2$, respectively. $B_1$ is the response for $A_1$ and it is first one to reach $I_{\text{AXI}}$. $S_i^{I,\text{C\&F}}$ buffers $B_1$ while waiting for $B_2$.
(f) $B_2$ has reached $S_i^{I,\text{C\&F}}$. $S_i^{I,\text{C\&F}}$ merges $B_1$ and $B_2$ into a single response $B$ for the original request $A$. $B$ is propagated to $HA_i$. The write transaction is concluded.

Cut-and-forward provides a methodology to address this issue with a configurable tradeoff in latency and resource consumption impact. The more complex switching methodology might require slightly higher resource consumption for implementation.



************************************************************************************************

OBSERVED EXAMPLES:


ID: <<CVE1>>

Link: <<LINK1>>

ObexSummary: We observed this issue in commercial AXI interconnect
IPs. Several other interconnects using cut-through switching on a
multi-channel on-chip communication standard might be affected.


************************************************************************************************

DETECTION METHODS:

Method: Architecture or Design Review

Desc: Instances of this issue can be detected by manual review of the
switching policy implemented in the interconnect and the deployed
on-chip communication standard.

Effectiveness: Opportunistic

Notes: Manual review requires to have a full description of the
architecture of the interconnect. This information might not be
available when a third-party interconnect is used.



Method: Formal Verification

Desc: Instances of this issue can be found in manager modules by using
property-based verification specifically targeting the detection of
stalls propagated to the shared resources [REF-KKK].

Effectiveness: High

Notes: 



Method: Simulation / Emulation

Desc: Instances of this issue can be found in simulation by
synthetically generating stalls at the input of the interconnect and
evaluating if the interconnect propagates the stalls at the output or
not.

Effectiveness: High

Notes: Simulations should be capable of triggering the stalls. Not all
of the Verification IP for on-chip communications might be capable of
triggering this issue.



************************************************************************************************

POTENTIAL MITIGATIONS:

Phase: Architecture and Design

Description: SoC architects can use a switching methodology stopping
stalls from being propagated to the interconnect, such as
Cut-and-Forward [REF XXX][REF ZZZ] or
Store-and-Forward. Alternatively, a monitoring and recovery module can
be added between the interconnect and each manager module to detect
stalls introduced by the module and restore a safe state in the
interconnect after a stall has been detected [REF YYY].

Effectiveness: High

Effectiveness Notes: The architect should evaluate which methodology
better suits the target platform, trading off performance and resource
consumption impact [REF XXX][REF YYY][REF ZZZ].


RELATED WEAKNESSES:

ChildOf CWE-841


REFERENCES:

Title: [REF-XXX] Cut and Forward: Safe and Secure Communication for FPGA System on Chips

URL: https://ieeexplore.ieee.org/document/9852740

Author: Francesco Restuccia, Ryan Kastner

Date: 2022


Title: [REF-YYY] Safely Preventing Unbounded Delays During Bus Transactions in FPGA-based SoC

URL: https://ieeexplore.ieee.org/abstract/document/9114758

Author: Francesco Restuccia, Alessandro Biondi, Mauro Marinoni, Giorgio Buttazzo

Date: 2020


Title: [REF-ZZZ] [AXI-REALM: A lightweight and modular interconnect extension for traffic regulation and monitoring of heterogeneous real-time SoCs

URL: https://ieeexplore.ieee.org/document/10546511

Author:  Thomas Benz, Alessandro Ottaviano, Robert Balas, Angelo Garofalo, Francesco Restuccia, Alessandro Biondi, Luca Benini

Date: 2024


Title: [REF-KKK] Safety verification of third-party hardware modules via information flow tracking

URL: Safety verification of third-party hardware modules via information flow tracking

Author: Andres Meza, Francesco Restuccia, Ryan Kastner, Jason Oberg

Date: 2022




ACTIVE ISSUES:
----------

SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: An initial submission (or full submission) cannot progress past
the consultation phase until SUB.UNCLEAR is addressed.

Comments: Based on the submitter's 2025-03-07 response, we have
further updated this submission.  We changed the description to
include the suggested phrase "that the remaining steps required by the
manager to complete the request are fulfilled in a timely manner".

The following tasks will remain in Stage 2:

(1) For Stage 2 discussion, we need to decide whether to use "manager
module" or "controller module" term, and how to best clarify that we
mean "a hardware module capable of initiating transactions on the bus
through its manager interface. Examples of manager modules are
processors, DMAs, hardware accelerators, etc."

(2) For Stage 2 discussion, we will need to account for potential
confusion with "speculative execution" as used with issues like
SPECTRE/MELTDOWN.

(3) For Stage 2 discussion, we will need to ensure that the following
details are appropriately merged into the submission: "the cut-through
switching policy, a switching methodology for high performance
commonly implemented at the interconnect level. In cut-through, a
request is propagated independently on the receipt at the interconnect
level of the corresponding data. As mentioned in the previous comment,
if the controller issuing a write request delays the provisioning of
the corresponding data, the other controllers experience delays in
accessing the bus. Such delays are capable of generating denial of
service."

(4) The CWE Team will separately record your comment on CWE-1059: "I
would like to highlight a subtle distinction: as I understand it,
CWE-1059 primarily addresses cases where documentation is incomplete
or missing. In contrast, the issue in (i) pertains to a specification
that is, either intentionally or unintentionally, underspecified. If
you believe this falls under the category covered by CWE-1059, then I
agree with your determination."


Response: [NO RESPONSE NECESSARY; ISSUE TO BE RESOLVED IN STAGE 2]

----------

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: The 2025-03-07 response agreed with our decision to make
this a child of CWE-841: Improper Enforcement of Behavioral
Workflow. Separately, we will modify CWE-841's description so that it
is more clearly consistent with this submission.  No response is
needed.

Response: [NO RESPONSE NECESSARY; ISSUE TO BE RESOLVED INDEPENDENT OF THIS SUBMISSION]

----------

RESOLVED ISSUES:


SUB.ABS.LOWLEVEL - "Low level of abstraction"

Description: The submission identifies a weakness, but it is a duplicate of
(or partially overlaps) existing weaknesses, indicating problems with the
submission or associated CWE entries.

Description: The submission identifies an issue, but its abstraction might
be too low-level to merit its own CWE entry. If it is focused on a
particular technology, framework, protocol, or function, then it might not
be unique enough to get its own CWE ID.  This might lead to modification of
an existing entry to include the additional details, or creation of a
higher-level entry for which the submission is one example. (Note: some
older CWE entries have this problem and would not be published today,
generally because they were too specific to a particular language.)

Resolution: The submission will be allowed to progress to later phases once
the more-general concept is appropriately identified and described. The
original, lower-level submission will serve as a primary example of the
more general concept.

Comments: The submitter said "the weakness is associated with general
concepts such as cut-through switching and multi-channel bus protocols
rather than only with the specific standard under analysis in the
references." We agree with the general concept and will separately
work to create a more general CWE (and/or update CWE-841: Improper
Enforcement of Behavioral Workflow as needed). This submission's level
of abstraction does not need to be changed, and it can remain
applicable to bus architectures. Please let us know if you agree with
this comment.

Response: I agree.


----------
TIMELINE:

Received: 2022-08-25

Ack-Receipt: 2022-08-29

Init-Review: 2022-09-12

Init-Consultation: 2024-06-25

Init-Declined: YYYY-MM-DD

Init-Accepted: 2025-03-24

Det-Requested: 2025-03-24

Det-Received: 2025-04-23

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD


COMMUNICATIONS LOG:
2022-08-29 sent email
2022-09-12 action review
2023-09-12 publish server
2024-06-25 sent email
2024-06-26 received reply
2025-03-06 sent email
2025-03-07 received comment
2025-03-24 sent email
2025-03-24 sent email
