SUBMISSION COMMUNICATION ID: ES2408-db30bcbe

ACTION TYPE: New Entry

SUBMISSION STATUS: Init-Consultation

AFFECTED CWES: 

ORIGIN: sub-server

SUBMISSION DATE: 2024-08-20 01:03:10

ISSUES: yes/active

ISSUE DETAILS: SUB.ATTACK, SUB.UNCLEAR, SUB.RELS

PUBTRACKER: #128

MTRACKER: #1158

GITHUBUSER: Ruegg

SUBMISSION TYPE: Software

NAME: False Interaction Feedback (FIF): Improper Sequence of Feedback in User Interfaces

DESCRIPTION:

The False Interaction Feedback (FIF) vulnerability occurs when an
application improperly allows feedback or confirmation messages to be
presented without verifying the sequence of user actions that should
precede them. This weakness can be exploited by attackers to create a
misleading narrative, deceiving users into believing that an action has
been completed successfully when, in fact, it has not. This issue affects
any feedback mechanism that relies on the proper sequencing of user
interactions within web, mobile, or desktop applications.

This vulnerability should be a significant concern to developers because
poor implementation causing a FIF will allow attackers to take advantage of
the trust a user has in the target platform and use it to support a
malicious false narrative that is likely aimed at harvesting or damaging
the user's information or reputation. In addition to this, the attacker is
directly accomplishing their malicious intentions under the guise and
reputation of the vulnerable platform, causing severe reputational damage
to the business as it appears complicit in the attack. This not only
compromises user trust but also tarnishes the platform's credibility.

The technical impact of an exploited FIF vulnerability can vary widely
depending on the type of feedback provided by the vulnerable target and the
narrative chosen by the attacker, but when exploited will likely result in
unauthorized disclosure of sensitive information, compromise of user
credentials, or installation of malicious software.

Consider a scenario where a website has the following flow for a password
reset:

1. The user navigates to `good.com/password/reset/`.

2. The front-end page displays fields for entering the old and new
passwords. Upon submission, the form sends a POST request to
`api.good.com/v2/change-password`.

3. If the password change is successful, the server responds with a
redirection header that directs the user to
`good.com/password/change-success/`, where they see a confirmation message
on the screen: "Your password has been changed!"

If `good.com/password/change-success/` is accessible to any end-user by
simply visiting the page without actually resetting their password, then
this flow is vulnerable to FIF.

In this scenario, an attacker could set up a malicious site that mimics the
legitimate password reset process and then redirects users to
`good.com/password/change-success/`. Because the feedback page appears to
be part of the trusted platform, users will not see any warning signs or
inconsistencies that would otherwise prompt them to verify their password
change on the legitimate site.

An arguably more malicious example of exploiting a FIF could be for the
purpose of installing malware. Many websites that offer software will show
feedback for the download, such as "Thank you for your download!" which
resides on its own page and is independent of the logic that prompts the
download itself. Because of this, an attacker can create a malicious
website posing as a tool and may include text such as "Requires
GoodSoftware - Download Here" with a hyperlink to the alleged tool. When
the victim clicks this, the malicious site will actually download the
malware it hosts on its own servers and then redirect to GoodSoftware's
"Thank you for your download!" page. Because GoodSoftware did not implement
a flow such that the feedback for the download is only shown with the logic
that downloads their legitimate file, attackers can use their brand image
and reputation to install malware on victims' machines.

There are many variations of this issue that can be taken advantage of,
such as:
- Payment confirmations
- File upload confirmations

While the examples provided focus on using FIF at the end of an attack, FIF
can be leveraged at any stage to reinforce the attacker's narrative. For
instance, a malicious site could use an iFrame + FIF to display a
legitimate-looking notice, possibly linked to a logged-in session, midway
through the attack, further deceiving the end-user.

Additionally, FIF is not limited to websites; its impact extends to
programs and mobile applications that use custom URL protocols or deep
links.

RELATED WEAKNESSES:

   Other CWE-451
   ChildOf CWE-602
   ChildOf CWE-441

REFERENCES:

Title: Discovering a New Vulnerability Type: False Interaction Feedback (FIF) and Its Implications
URL: https://blog.andreruegg.com//posts/2024-08-18-identifying-a-new-vulnerability-type-fif/


ACTIVE ISSUES:

SUB.ATTACK - "Too attack-focused"

Description: The submission's name and/or description emphasizes the
attack, not the weakness. Either the submission's weakness is not
well-understood, or it is better described as an attack pattern, which may
be suitable for inclusion in CAPEC.

Resolution: An initial submission cannot progress to later phases unless it
also includes a clear weakness (i.e., is not subject to SUB.UNCLEAR).

Comments: This submission largely focuses on the attack described as "False Interaction Feedback"
but does not describe the inherent weakness that allows this attack vector to exist.
The submission should be more clear about what weakness is occurring.  For instance,
could this be an authorization issue where the success pages should not be displayed unless a logged
in user who just accomplished that action accesses the page?  Please propose a rephrased description
that focuses solely on the weakness.

Response: <SUBMITTER SHOULD REPLY HERE>


----------

SUB.UNCLEAR - "Unclear weakness"

Description: The submission's name and/or description does not clearly
identify a weakness, or it is written in a way that is vague and could
cause the submission to be incorrectly mapped to.

Resolution: A submission cannot progress past the consultation phase until
SUB.UNCLEAR is addressed.

Comments: Related to the above submission problem for SUB.ATTACK, the submission
does not make the weakness clear in the description due to being too attack focused.
It is important to identify and be explicit about what the root weakness is that allows
for FIF to occur.  In the SUB.ATTACK explanation, one possible proposal is that this
could be an authorization issue for viewing the page, maybe related to 
CWE-425: Direct Request ('Forced Browsing').  Mitigations can sometimes help identify
the root cause weakness, although that is not always that case.  Please propose a 
rephrased description that focuses solely on the weakness.

Response: <SUBMITTER SHOULD REPLY HERE>


----------

SUB.RELS - "Unclear relationships"

Description: The submission suggests some relationships, but the
name/description is not explained in a way in which the relationship is
relevant; or, the weakness is apparent, but it is not clear what the best
parent/child relationship(s) would be.

Resolution: The submission cannot progress to the next phase if SUB.UNCLEAR
is present. It can progress to other phases if the CWE Team agrees that the
potential relationships may require closer investigation.  The submission
cannot progress to the Publication stage until clear relationships and
direct parents are identified. The CWE Team may decide to use high-level
relationships (e.g., to Pillars) if deeper problems such as SUB.ABS.SUBTREE
exist and cannot be quickly resolved.

Comments: Because the weakness is not entirely clear based on the
current state of the submission, it is also not clear if the proposed
relationships are correct.  CWE-451: "User Interface (UI)
Misrepresentation of Critical Information" seems very related to what
is being described, although it is still unclear if this is related in
part due to the attack scenario described or the actual weakness.
Perhaps a child weakness of CWE-451 could be applicable, or the
extended description updated to discuss displaying confirmation pages
at improper times. CWE-841: "Improper Enforcement of Behavioral
Workflow" might be a good parent for this, if the key weakness is that
the feedback is made available at the wrong time, e.g. as stated in
the original description where "GoodSoftware did not implement a flow
such that the feedback for the download is only shown with the logic
that downloads their legitimate file."  CWE-602: "Client-Side
Enforcement of Server-Side Security" was proposed, but it does not
seem to relate because there do not seem to be any Client-Side
security checks happening that enable FIF. The proposal for CWE-441:
"Unintended Proxy or Intermediary ('Confused Deputy')" seems
tangential to the concept of the attack, but does not appear to be a
fitting parent.  It is still hard to make these distinctions without
fully understanding the weakness.  Once we can better articulate the
weakness we can arrive at suitable relationships.  Please indicate if
you agree or disagree with any of these current assessments.

Response: <SUBMITTER SHOULD REPLY HERE>


RESOLVED ISSUES:



TIMELINE:

Received: 2024-08-20

Ack-Receipt: 2024-12-09

Init-Review: 2025-04-01

Init-Consultation: 2025-06-24

Init-Declined: YYYY-MM-DD

Init-Accepted: YYYY-MM-DD

Det-Requested: YYYY-MM-DD

Det-Received: YYYY-MM-DD

Det-Review: YYYY-MM-DD

Det-Consultation: YYYY-MM-DD

Det-Accepted: YYYY-MM-DD

Internal-Update: YYYY-MM-DD

CWE-Assigned: YYYY-MM-DD

CWE-Modified: YYYY-MM-DD

Final-Coord: YYYY-MM-DD

CWE-Published: YYYY-MM-DD

Post-Publication: YYYY-MM-DD

Closed: YYYY-MM-DD




COMMUNICATIONS LOG:
2024-12-09 sent email
2025-04-01 sent email
2025-06-24 sent email
